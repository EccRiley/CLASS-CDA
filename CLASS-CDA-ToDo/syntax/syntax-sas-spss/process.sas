* PROCESS for SAS 2.16.1 ;
* Written by Andrew F. Hayes ;
* www.afhayes.com ;
* Copyright 2012-2016 ;
* Online distribution other than through www.afhayes.com or processmacro.org is not authorized;
* Please read the documentation available in Appendix A of Hayes (2013) prior to use ;
* www.guilford.com/p/hayes3 ;

* Permission is hereby granted, free of charge, to any person obtaining a copy of this software;
* and associated documentation files (the "Software"), to use the software in this form.  Distribution;
* after modification is prohibited, as is its use for any commercial purpose without authorization; 
* This software should not be posted or stored on any webpage, server, or directory accessible to;
* the public whether free or for a charge unless written permission has been granted by the copyright;
* holder.  The copyright holder requests that this software be distributed by directing users to;
* processmacro.org where the latest release of the software and documentation is archived and;
* can be downloaded.  Permission is granded to install this software in university computing labs for;
* noncommercial nonprofit use;

* THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,;
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF;
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT;
* IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,;
*  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT;
* OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE;
* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE;

* The above text should be included in any distribution of the software;

%macro hcest (hcdat=,hcres=,hctog=,hcmse=);
hcinvXtX=inv(&hcdat`*&hcdat);
k3=ncol(&hcdat);
if (&hctog = 1) then;do;
  h=&hcdat[,1];
  do i3 = 1 to nrow(&hcdat);
    h[i3,1]=&hcdat[i3,]*hcinvxtx*(&hcdat[i3,])`;
  end;
  do i3 = 1 to k3;
    &hcdat[,i3]=(&hcres[,ncol(&hcres)]/(1-h))#(&hcdat[,i3]);
  end;
end;
if (&hctog ^= 1) then;do;
  do i3 = 1 to k3;
    &hcdat[,i3]=sqrt(&hcmse)#(&hcdat[,i3]);
  end;
end;
hcdat=&hcdat;
covmat=hcinvXtx*&hcdat`*&hcdat*hcinvXtX;
%mend;

%macro bcboot (databcbt=,estmte=9999);
temp=&databcbt;
temp[rank(temp)]=&databcbt;
badlo=0;
badhi=0;
if (&estmte ^= 9999) then;
  do;pv=(temp < &estmte);pv=pv[+]/boot;
  ppv=pv;
  if (pv > 0.5) then;do;ppv=1-pv;end;
  y5=sqrt(-2*log(ppv));
  xp=y5+((((y5*p4+p3)*y5+p2)*y5+p1)*y5+p0)/((((y5*q4+q3)*y5+q2)*y5+q1)*y5+q0);
  if (pv <= .5) then;do;xp=-xp;end;
  cilow=round(boot*(probnorm(2*xp+xp2)));
  cihigh=int(boot*(probnorm(2*xp+(-xp2))))+1;
  if (cilow < 1) then;do;cilow=1;booterr=1;badlo=1;end;
  if (cihigh > boot) then;do;cihigh=boot;booterr=1;badhi=1;end;
  llcit=temp[cilow,1];
  ulcit=temp[cihigh,1];
  end;
if (&estmte=9999) then;do;llcit=temp[cilow,1];ulcit=temp[cihigh,1];end;
%mend;

%macro bcci (data=,var=,point=9999,conf=95);
proc iml;
use &data;
read all var{&var} into perdata;
xx=(perdata = .);xx=xx[,+];
j=1;do i = 1 to nrow(perdata);if xx[i,1]=0 then;do;perdata[j,]=perdata[i,];j=j+1;end;end;
perdata=perdata[1:j-1,];
berror=0;
p0=-.322232431088;
p1 = -1;
p2 = -.342242088547;
p3 = -.0204231210245;
p4 = -.0000453642210148;
q0 = .0993484626060;
q1 = .588581570495;
q2 = .531103462366;
q3 = .103537752850;
q4 = .0038560700634;
conf=&conf;
if ((floor(conf) >= 100) | (floor(conf) <= 50)) then;do;conf=95;end;
alpha2=(1-(conf/100))/2;
y5=sqrt(-2*log(alpha2));
xp2=-(y5+((((y5*p4+p3)*y5+p2)*y5+p1)*y5+p0)/((((y5*q4+q3)*y5+q2)*y5+q1)*y5+q0));
boot=nrow(perdata);
temp=perdata;
temp[rank(temp)]=perdata;
badlo=0;badhi=0;
if (&point ^= 9999) then;
  do;pv=(temp < &point);pv=pv[+]/boot;
  if ((pv=0) | (pv=1)) then;do;berror=2;end;
  if (berror=0) then;do;
    ppv=pv;
    if (pv > 0.5) then;do;ppv=1-pv;end;
    y5=sqrt(-2*log(ppv));
    xp=y5+(((((y5*p4+p3)*y5+p2)*y5+p1)*y5+p0)/((((y5*q4+q3)*y5+q2)*y5+q1)*y5+q0));
    if (pv <= .5) then;do;xp=-xp;end;
    cilow=round(boot*(probnorm(2*xp+xp2)));
    cihigh=int(boot*(probnorm(2*xp+(-xp2))))+1;
    if (cilow < 1) then;do;berror=1;end;
    if (cihigh > boot) then;do;berror=1;end;
    if (berror=0) then;do;
      llcit=temp[cilow,1];
      ulcit=temp[cihigh,1];
      nametmp="Conf%"//"LLCI"//"ULCI";
	  outp=conf//llcit//ulcit;
      print outp [label="Bias corrected confidence interval:" rowname = nametmp format = 10.4]; 
    end;
  end;
end;
if (&point = 9999) then;do;
  cilowp=round(boot*(probnorm(xp2)));
  cihighp=int(boot*(probnorm(-xp2)))+1;
  if (cilowp < 1) then;do;berror=1;end;
  if (cihighp > boot) then;do;berror=1;end;
  if (berror=0) then;do;
    llcitp=temp[cilowp,1];
    ulcitp=temp[cihighp,1];
    nametmp="Conf%"//"LLCI"//"ULCI";
	outp=conf//llcitp//ulcitp;
    print outp [label="Percentile confidence interval:" rowname = nametmp format = 10.4]; 
  end;
end;
if (berror=1) then;do;
  print "Error: Decrease your confidence or increase the number of bootstrap estimates.";
end;
if (berror=2) then;do;
  print "Error: Impossible point estimate provided";
end;
quit; 
%mend;


%macro logit2 (pt1lp=,xlp=,ylp=);
  pt1lp=&pt1lp;xlp=&xlp;ylp=&ylp;
  do jjj = 1 to iterate UNTIL (abs(LL1-LL2) < converge);  
  	LL1=LL2;
    vt1=diag(pt1lp#pt1lp);
    b=bt1+inv(xlp`*vt1*xlp)*xlp`*(ylp-pt1lp);
    pt1lp = 1/(1+exp(-(xlp*b)));
    check = (pt1lp < .00000000000001);
    itprob = (check[+,] > 0);
    if (itprob = 0) then;do;
      check = (pt1lp > .99999999999999);
      itprob = (check[+,] > 0);
    end;
	if (itprob > 0) then;do;
	  do kkk = 1 to nrow(pt1lp);
        if (pt1lp[kkk,1]=1) then;do;
          pt1lp[kkk,1]=.99999999999999;
	    end;
	    if (pt1lp[kkk,1]=0) then;do;
          pt1lp[kkk,1]=.00000000000001;
	    end;
	  end;
	  itprob=0;
	end;
    if (itprob = 0) then;do;
      LL=ylp#log(pt1lp)+(1-ylp)#log(1-pt1lp);
	  LL2= -2*LL[+,];
    end;
    bt1=b;
  end;
  vt1=diag(pt1lp#(1-pt1lp));
  varb=inv(xlp`*vt1*xlp);
  seb=sqrt(vecdiag(varb));
%mend;

%macro process (data=,vars=,model=77,y=,m=,x=,w=,z=,v=,q=,conf=95,
  hc3=0,cluster=,wmodval=999,zmodval=999,vmodval=999,qmodval=999,mmodval=999,
  xmodval=999,boot=5000,center=0,quantile=0,effsize=0,normal=0,varorder=2,total=0,
  plot=0,detail=1,iterate=10000,converge=0.00000001,percent=0,jn=0,coeffci=1,
  covmy=0,contrast=999,seed=0,save=xxx,mc=0,decimals=10.4,covcoeff=0,olsdichy=0,olsdichm=0,ws=0,
  mcx=0,mcm=0);
options pagesize=32767;
proc iml;
use &data;
read all var{&vars} into dat;
vnames={&vars};
yname={&y};xname={&x};mnames={&m};
if ("&w" = "") then wname="xxx";else wname = "&w";
if ("&z" = "") then zname="xxx";else zname = "&z";
if ("&v" = "") then vname="xxx";else vname = "&v";
if ("&q" = "") then qname="xxx";else qname = "&q";
if ("&save" = "") then saveboot="xxx";else saveboot="&save";
if ("&cluster" = "") then clname="xxx";else clname = "&cluster";

wname=upcase(wname);zname=upcase(zname);vname=upcase(vname);qname=upcase(qname);clname=upcase(clname);
ninit=nrow(dat);
xx=(dat = .);xx=xx[,+];
j=1;do i = 1 to nrow(dat);if xx[i,1]=0 then;do;dat[j,]=dat[i,];j=j+1;end;end;
dat=dat[1:j-1,];
n=nrow(dat);
p0=-.322232431088;
p1 = -1;
p2 = -.342242088547;
p3 = -.0204231210245;
p4 = -.0000453642210148;
q0 = .0993484626060;
q1 = .588581570495;
q2 = .531103462366;
q3 = .103537752850;
q4 = .0038560700634;
badend=0;priorlo=-9999999;priorhi=9999999;
criterr=0;cluster=0;clsdmy=0;jndich=0;booterr=0;
wvdich=0;zqdich=0;mod74dic=0;
effsize=(&effsize=1);
covcoeff=(&covcoeff=1);
note=j(10,1,0);notes=1;iterr=0;clsmtch=0;
quantile=(&quantile=1);jn=(&jn=1);
mmodval=&mmodval;
center=(&center=1);detail=(&detail=1);coeffci=(&coeffci=1);
contrast={&contrast};
ncontr=ncol(contrast);
if ((ncontr=1) & (nrow(contrast) >1)) then;do;ncontr=50;end;
if (contrast[1,1]=999) then;do;ncontr=1;contrast=0;end;
if (ncontr=1) then;do;
  contrast=floor(contrast);
  if (contrast > 2) | (contrast < 0) then;do;ncontr=1;contrast=0;end;
end;
conf=(&conf);bconoff=(&percent ^= 1);
covmy=floor(&covmy);if (covmy < 0 | covmy > 2) then;do;covmy=0;end;
if ((floor(conf) >= 100) | (floor(conf) <= 50)) then;do;
  conf=95;note[notes,1]=1;notes=notes+1;
  end;
if (n < ninit) then;do;nmiss=ninit-n;note[notes,1]=11;notes=notes+1;end;
errs=0;quantd=j(1,6,0);quantc=j(1,6,0);mcheck=0;ttt=0;
plot=(&plot ^= 0);
runerrs=j(50,1,0);
model=floor(&model);
normal=(&normal);
ws=(&ws);
olsdichm=(&olsdichm=1);olsdichy=(&olsdichy=1);
mcx=floor(&mcx);
mcm=floor(&mcm);
if (ws=1) then;do;
  if (effsize=1) then;do;
    note[notes,1]=19;notes=notes+1;effsize=0;
  end;
  if (normal=1) then;do;
    note[notes,1]=16;notes=notes+1;normal=0;
  end;
end;
if (model ^= 4) then;do;ws=0;end;
if ((jn = 1) & (model ^= 1) & (model ^= 3)) then;do;
  note[notes,1]=7;notes=notes+1;
end;
if ((model > 76) | (model < 1)) then;do;
  model=77;criterr=1;errs=errs+1;runerrs[errs,1]=19;
end;
itprob=0;
if (mcx < 0) then;do;mcx=0;end;
if (mcx > 4) then;do;mcx=0;end;
if (mcm < 0) then;do;mcm=0;end;
if (mcx > 4) then;do;mcm=0;end;
if ((mcx > 0) & (mcm > 0)) then;do;errs=errs+1;runerrs[errs,1]=34;criterr=1;end;
if (((model ^= 1) & (model ^= 4)) & ((mcx > 0) | (mcm > 0))) then;do;
  errs=errs+1;runerrs[errs,1]=35;criterr=1;
end;
if ((model = 4) & (mcm > 0)) then;do;
  errs=errs+1;runerrs[errs,1]=41;criterr=1;
end;
if ((mcx > 0) & (jn ^= 0)) then;do;jn=0;note[notes,1]=23;notes=notes+1;end;
if ((mmodval ^= 999) & (mcm > 0)) then;do;note[notes,1]=24;notes=notes+1;end;
nmeds = ncol(mnames);
toteff=0;toteff=((&total=1)*((model=4) | (model=6)));
varorder=(&varorder);
hc3=(&hc3 ^= 0);
centvar={'xxx'};
modelm=
{0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1,
 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 2,
 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 3,
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4,
 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 5,
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6,
 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 7,
 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 8,
 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 9,
 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 3 10,
 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5 11,
 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 5 12,
 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 5 13,
 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 14,
 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 2 15,
 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 4 16,
 0 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 4 17,
 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 6 18,
 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 6 19,
 0 0 0 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 6 20,
 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 21,
 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 7 22,
 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 23,
 1 1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 24,
 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 25,
 1 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 26,
 1 1 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 27,
 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 7 28,
 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 7 29,
 1 1 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 30,
 1 1 0 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 31,
 1 1 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 32,
 1 1 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 33,
 1 1 1 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 34,
 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 35,
 1 0 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 36,
 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 37,
 1 0 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 38,
 1 0 0 1 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 39,
 1 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 40,
 1 0 0 1 1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 41,
 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 42,
 1 0 0 1 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 43,
 1 0 0 1 1 1 1 0 0 1 0 0 0 0 0 0 0 0 0 44,
 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 45,
 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 46,
 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 47,
 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 48,
 1 1 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 49,
 1 1 0 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 50,
 1 1 1 1 1 0 1 1 1 0 0 0 0 0 0 0 0 0 0 51,
 1 1 1 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 52,
 1 1 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 53,
 1 1 0 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 54,
 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 55,
 1 1 1 1 1 1 0 0 0 1 1 1 0 0 0 0 0 0 0 56,
 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 57,
 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 58,
 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 59,
 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 60,
 1 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 61,
 1 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 62,
 1 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 0 63,
 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 64,
 1 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 65,
 1 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 66,
 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 67,
 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 68,
 1 1 1 0 0 0 1 1 1 0 0 0 1 0 0 0 0 0 0 69,
 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 70,
 1 0 0 1 0 0 1 0 0 1 0 0 1 1 1 0 0 0 0 71,
 1 1 1 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 72,
 1 1 1 0 0 0 1 1 1 0 0 0 1 0 0 1 1 0 0 73,
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 74,
 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 75,
 1 1 0 0 0 0 1 1 0 0 0 0 1 0 0 1 0 0 0 76,
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 77};
wm=modelm[model,1];
zm=modelm[model,2];
wzm=modelm[model,3];
vy=modelm[model,4];
qy=modelm[model,5];
vqy=modelm[model,6];
wy=modelm[model,7];
zy=modelm[model,8];
wzy=modelm[model,9];
vxy=modelm[model,10];
qxy=modelm[model,11];
vqxy=modelm[model,12];
wmy=modelm[model,13];
wvmy=modelm[model,14];
wvxy=modelm[model,15];
zmy=modelm[model,16];
wzmy=modelm[model,17];
xmy=modelm[model,18];
imm=modelm[model,19];
if (model = 74) then;do;vdich=0;end;
if ((ncontr > 1) & ((model < 4) | (model > 5))) then;do;
  contrast=0;ncontr=1;note[notes,1]=29;notes=notes+1;
end;
if ((ncontr > 1) & ((model=4) | (model = 5)) & (ncontr ^= nmeds)) then;do;
  contrast=0;ncontr=1;note[notes,1]=30;notes=notes+1;
end;
if (ncol(xname) ^= 1) then;do;errs=errs+1;runerrs[errs,1]=20;criterr=1;end;
if (ncol(mnames) > 10) then;do;errs=errs+1;runerrs[errs,1]=39;criterr=1;end;
if (ncol(yname) ^= 1) then;do;errs=errs+1;runerrs[errs,1]=21;criterr=1;end;
if ((&mmodval=0) & (&wmodval = 0) & (model=3 | model=2)) then;do;
  if (ncontr=1) then;do;
    if (contrast=1) then;do;
      errs=errs+1;runerrs[errs,1]=31;criterr=1;
	end;
  end;
end;
xlist = ((wm=1)|(zm=1)|(wzm=1)|(wy=1)|(zy=1)|(wzy=1)|(vxy=1)|(qxy=1)|(vqxy=1)|(wvxy=1)|(xmy=1));
mlist = ((vy=1)|(qy=1)|(vqy=1)|(zmy=1)|(wmy=1)|(wzmy=1)|(xmy=1)|(model < 4));
bad=0;
if (criterr=0) then;do; 
  werr=0;verr=0;qerr=0;zerr=0;yerr=1;xerr=1;
  wlist=((wm=1)|(wzm=1)|(wy=1)|(wzy=1)|(wm=1)|(wvmy=1)|(wvmy=1)|(wvxy=1)|(wzmy=1));
  if ((wlist=1) & (wname = "XXX")) then;do;werr=1;wlist=0;errs=errs+1;runerrs[errs,1]=4;
  end;
  if ((wlist=1) & ((wname=qname)|(wname=vname)|(wname=zname)|(wname=xname)|(wname=yname))) then;do;
    werr=4;errs=errs+1;runerrs[errs,1]=12;
  end;
  zlist=((zm=1)|(wzm=1)|(zy=1)|(wzy=1)|(zmy=1)|(wzmy=1));
  if ((zlist=1) & (zname = "XXX")) then;do;zerr=1;zlist=0;errs=errs+1;runerrs[errs,1]=5;
  end;
  if ((zlist=1) & ((zname=qname)|(zname=vname)|(zname=wname)|(zname=xname)|(zname=yname))) then;do;
    zerr=4;errs=errs+1;runerrs[errs,1]=13;
  end;
  qlist=((qy=1)|(vqy=1)|(qxy=1)|(vqxy=1));
  if ((qlist=1) & (qname = "XXX")) then;do;qerr=1;qlist=0;errs=errs+1;runerrs[errs,1]=6;
  end;
  if ((qlist=1) & ((qname=zname)|(qname=vname)|(qname=wname)|(qname=xname)|(qname=yname))) then;do;
    qerr=4;errs=errs+1;runerrs[errs,1]=14;
  end;
  vlist=((vy=1)|(vqy=1)|(vxy=1)|(vqxy=1)|(wvmy=1)|(wvxy=1));
  if ((vlist=1) & (vname = "XXX")) then;do;verr=1;vlist=0;errs=errs+1;runerrs[errs,1]=7;
  end;
  if ((vlist=1) & ((vname=zname)|(vname=qname)|(vname=wname)|(vname=xname)|(vname=yname))) then;do;
    qerr=4;errs=errs+1;runerrs[err,1]=15;
  end;
  if ((wlist=0) & (wname ^= "XXX")) then;do;werr=2;errs=errs+1;runerrs[errs,1]=8;
  end;
  if ((zlist=0) & (zname ^= "XXX")) then;do;zerr=2;errs=errs+1;runerrs[errs,1]=9;
  end;
  if ((qlist=0) & (qname ^= "XXX")) then;do;qerr=2;errs=errs+1;runerrs[errs,1]=10;
  end;
  if ((vlist=0) & (vname ^= "XXX")) then;do;verr=2;errs=errs+1;runerrs[errs,1]=11;
  end;
  if (hc3=1) then;do;note[notes,1]=3;notes=notes+1;
  end;
  alpha2=(1-(conf/100))/2;
  y5=sqrt(-2*log(alpha2));
  xp2=-(y5+((((y5*p4+p3)*y5+p2)*y5+p1)*y5+p0)/((((y5*q4+q3)*y5+q2)*y5+q1)*y5+q0));
  cons=j(n,1,1);
  temp=(n*t(dat)*dat)-(t(dat[+,])*dat[+,]);
  temp=temp/(n*(n-1));temp=sqrt(vecdiag(temp));temp=(temp = 0);temp=temp[+,];
  temp2=1;

  do i = 1 to ncol(vnames);
     if (vnames[,i]=xname) then;do;tmp2=dat[,i];end;
  end;

  if (ws=1) then;do;
    temp2=(n*t(tmp2)*tmp2)-(t(tmp2[+,])*tmp2[+,]);temp2=temp2/(n*(n-1));
  end;
  if ((temp > 0 & ws=0) | ((temp > 0) & (ws=1) & (temp2 > 0))) then;do;
    criterr=1;errs=errs+1;runerrs[errs,1]=27;
  end;
  nmeds=ncol(mnames);
  mcmats=I(nmeds*2);
  mccoeff=j((nmeds*2),1,0);
  sobel=j(nmeds,4,-999);
  if ((model = 6) & (nmeds > 4)) then;do;errs=errs+1;runerrs[errs,1]=2;
  end;
  if ((model < 4) & (nmeds > 1)) then;do;errs=errs+1;runerrs[errs,1]=3;
  end;
  nmods=(model=74);
  bad=0;intcnt=1;modvals=0;modvalsd=0;
  yintemp={"INT_1" "INT_2" "INT_3" "INT_4" "INT_5" "INT_6" "INT_7" "INT_8" "INT_9" "INT_10" "INT_11" "INT_12"};
  yintemp=yintemp||{"INT_13" "INT_14" "INT_15" "INT_16" "INT_17" "INT_18" "INT_19" "INT_20" "INT_21" "INT_22"};
  yintemp=yintemp||{"INT_23" "INT_24" "INT_25" "INT_26" "INT_27" "INT_28" "INT_29" "INT_30" "INT_31" "INT_32"};
  yintemp=yintemp||{"INT_33" "INT_34" "INT_35" "INT_36" "INT_37" "INT_38" "INT_39" "INT_40" "INT_41" "INT_42"};
  yintemp=yintemp||{"INT_43" "INT_44" "INT_45" "INT_46" "INT_47" "INT_48" "INT_49" "INT_50" "INT_51" "INT_52"};
  yintemp=yintemp||{"INT_53" "INT_54" "INT_55" "INT_56" "INT_57" "INT_58" "INT_59" "INT_60" "INT_61" "INT_62"};
  cntname="(C1)"//"(C2)"//"(C3)"//"(C4)"//"(C5)"//"(C6)"//"(C7)"//"(C8)"//"(C9)"//"(C10)";
  cntname=cntname//"(C11)"//"(C12)"//"(C13)"//"(C14)"//"(C15)"//"(C16)"//"(C17)"//"(C18)"//"(C19)"//"(C20)";
  cntname=cntname//"(C21)"//"(C22)"//"(C23)"//"(C24)"//"(C25)"//"(C26)"//"(C27)"//"(C28)"//"(C29)"//"(C30)";
  cntname=cntname//"(C31)"//"(C32)"//"(C33)"//"(C34)"//"(C35)"//"(C36)"//"(C37)"//"(C38)"//"(C39)"//"(C40)";
  cntname=cntname//"(C41)"//"(C42)"//"(C43)"//"(C44)"//"(C45)"//"(C46)"//"(C47)"//"(C48)"//"(C49)"//"(C50)";
  cntname=cntname//"(C51)"//"(C52)"//"(C53)"//"(C54)"//"(C55)"//"(C56)"//"(C57)"//"(C58)"//"(C59)"//"(C60)";
  cntname=cntname//"(C61)"//"(C62)"//"(C63)"//"(C64)"//"(C65)"//"(C66)"//"(C67)"//"(C68)"//"(C69)"//"(C70)";
  cntname=cntname//"(C71)"//"(C72)"//"(C73)"//"(C74)"//"(C75)"//"(C76)"//"(C77)"//"(C78)"//"(C79)"//"(C80)";
  cntname=cntname//"(C81)"//"(C82)"//"(C83)"//"(C84)"//"(C85)"//"(C86)"//"(C87)"//"(C88)"//"(C89)"//"(C90)";
  cntname=cntname//"(C91)"//"(C92)"//"(C93)"//"(C94)"//"(C95)"//"(C96)"//"(C97)"//"(C98)"//"(C99)"//"(C100)";
  cntname=cntname//"(C101)"//"(C102)"//"(C103)"//"(C104)"//"(C105)";
  apathnam="a path"//"a1 path"//"a2 path"//"a3 path"//"a4 path"//"a5 path"//"a6 path"//"a7 path"//"a8 path"//"a9 path"//"a10 path";
  bpathnam="b path"//"b1 path"//"b2 path"//"b3 path"//"b4 path"//"b5 path"//"b6 path"//"b7 path"//"b8 path"//"b9 path"//"b10 path";
  modvnm = {"xxxxxxxxxxxxxxxx"}||{"xxx"}||{"xxx"}||{"xxx"}||{"xxx"};
  modvnm2 = modvnm;
  mlab="M1    ="//"M2    ="//"M3    ="//"M4    ="//"M5    ="//"M6    ="//"M7    ="//"M8    ="//"M9    ="//"M10   =";
  m=j(n,nmeds,1);mmat=j(16,nmeds,0);ymat=j(8,nmeds,0);deco=j(10,1,0);modmat=j(5,5,999);
  modmatv=j(1,5,1);modmatp=j(1,5,0);modprod=modmatv;
  iterate=abs(floor(&iterate));converge=abs(&converge);
  boot=abs(floor(&boot));adjust=0;
  if ((ws=1) & (&mc > 0)) then;do;note[notes,1]=17;notes=notes+1;end;
  mc=(abs(floor(&mc))*(1-ws));
  if ((mc > 0) & (model > 5)) then;do;
    if (boot = 0) then;do;boot=mc;end;
    mc=0;
	note[notes,1]=12;notes=notes+1;
  end;
  if (boot ^= 0) then;do;
    cilow=floor(boot*(1-(conf/100))/2);cihigh=floor((boot*(conf/100)+(boot*(1-(conf/100))/2)))+1;
    do until ((cilow > 0) & (cihigh <= boot));
      cilow=floor(boot*(1-(conf/100))/2);cihigh=floor((boot*(conf/100)+(boot*(1-(conf/100))/2)))+1;
      if ((cilow < 1) | (cihigh > boot)) then;do;boot=floor((boot+1000)/1000)*1000;adjust=1;
      end;
    end;
    if (adjust = 1) then;do;note[notes,1]=6;notes=notes+1;end;
  end;
  if ((mc > 0) & ((model > 3) & (model < 6))) then;do;boot=0;bconoff=0;end;
  if ((boot > 0) & (mc > 0)) then;do;mc=0;end;
  savboot=0;
  if ((saveboot ^= "xxx") & (boot > 0) & (model > 3)) then;do;savboot=1;
  end;
  if ((savboot=1) & (ws=1)) then;do;
    note[notes,1]=20;notes=notes+1;savboot=0;
  end;
  if ((boot ^= 0) | (mc ^= 0)) then;do;
    bootsz=boot;
	if (mc > 0) then;do;bootsz=mc;end;
    cilow=round(bootsz*(1-(conf/100))/2);cihigh=int((bootsz*(conf/100)+(bootsz*(1-(conf/100))/2)))+1;
    do until ((cilow > 0) & (cihigh <= bootsz));
      cilow=floor(bootsz*(1-(conf/100))/2);cihigh=floor((bootsz*(conf/100)+(bootsz*(1-(conf/100))/2)))+1;
      if ((cilow < 1) | (cihigh > bootsz)) then;do;bootsz=floor((bootsz+1000)/1000)*1000;adjust=1;
      end;
    end;
	boot=bootsz;
	if (mc > 0) then;do;mc=bootsz;end;
	if ((boot > 0) & (mc > 0) & ((model > 3) & (model < 6))) then;do;boot=0;end;
    if ((adjust = 1) & (boot > 0)) then;do;note[notes,1]=6;notes=notes+1;end;
	if ((adjust = 1) & (mc > 0)) then;do;note[notes,1]=13;notes=notes+1;end;
  end;
  if ((model = 6) & (nmeds > 1)) then;do;
    mmpaths=j((nmeds+2),(nmeds+2),0);
    if (nmeds = 2) then;do;indboot=j((boot+1),3,999);
    end;
    if (nmeds = 3) then;do;indboot=j((boot+1),7,999);
    end;
    if (nmeds = 4) then;do;indboot=j((boot+1),15,999);
    end;
    indlbl={"Total", "Ind1:", "Ind2:", "Ind3:", "Ind4:", "Ind5:", "Ind6:", "Ind7:", "Ind8:", "Ind9:"};
    indlbl=indlbl//{"Ind10:", "Ind11:", "Ind12:", "Ind13:", "Ind14:", "Ind15:"};
    indlbl2={"Ind1", "Ind2", "Ind3", "Ind4", "Ind5", "Ind6", "Ind7", "Ind8", "Ind9"};
    indlbl2=indlbl2//{"Ind10", "Ind11", "Ind12", "Ind13", "Ind14", "Ind15"};
    indces=j((boot+1),4,999);
  end;
  if (model < 4) then;do;boot=0;cmat=j(10,1,0);zmat=j(10,1,0);
  end;
  nvarch=j(1,ncol(dat),0);wmatch=0;zmatch=0;vmatch=0;qmatch=0;mmatch=0;
  minprobe=0;maxprobe=0;
  do i = 1 to ncol(vnames); *[b];
    if (vnames[,i]=yname) then;do;
      y=dat[,i];nvarch[1,i]=1;yerr=0;
      if ((yname=xname)|(yname=wname)|(yname=zname)|(yname=vname)|(yname=qname)) then;do;
        errs=errs+1;runerrs[errs,1]=17;
      end;
    end;
    if (vnames[,i]=xname) then;do;
      x=dat[,i];nvarch[1,i]=1;xdich=1;xerr=0;
      do jj = 1 to n;
        if ((x[jj,1] ^= max(x)) & (x[jj,1] ^= min(x))) then;do;xdich=0;goto leave;
        end;
      end;
      leave:
      xmean=x[+,]/n;
      if ((center = 1) & ((model < 4) | (xlist > 0)) & (mcx=0)) then;do;
        meanvec=j(n,1,xmean);x=x-meanvec;centvar=centvar||xname;
      end;
      xmean=x[+,]/n;
      tmp=x-(cons*xmean);
      xsd=sqrt((1/(n-1))*(t(tmp)*tmp));
      if (xdich=0) then;do;
        quantc[1,6]=1;matx=(xmean-xsd)//xmean//(xmean+xsd);
		if ((&xmodval = 999) & (quantile = 0)) then;do;
		  if ((matx[1,1] < min(x)) & (model=74)) then;do;matx[1,1]=min(x);minprobe=1;end;
		  if ((matx[3,1] > max(x)) & (model=74)) then;do;matx[3,1]=max(x);maxprobe=1;end;
		end;
        if (quantile = 1) then;do;
          quantd[1,6]=1;quantc[1,6]=0;tmp=x;tmp[rank(tmp)]=x;
          matx=tmp[floor(n*0.10),1]//tmp[floor(n*0.25),1]//tmp[floor(n*0.5),1]//tmp[floor(n*0.75),1]//tmp[floor(n*0.9),1];
        end;
      end;
      if (xdich=1) then;do;matx=min(x)//max(x);
	    if (model=74) then;do;matx=min(x);mod74dic=1;end;
      end;
      if (&xmodval ^= 999) then;do;matx=&xmodval;quantd[1,6]=0;quantc[1,6]=0;
      end;
    end;
    if ((werr=0) & (wlist=1)) then;do;
      if (vnames[,i]=wname) then;do;
        werr=0;wmatch=1;w=dat[,i];
        if (center = 1) then;do;
          wmean=w[+,]/n;meanvec=j(n,1,wmean);w=w-meanvec;centvar=centvar||wname;
        end;
        nvarch[1,i]=1;nmods=nmods+1;wmean=w[+,]/n;tmp=w-(cons*wmean);
        wsd=sqrt((1/(n-1))*(t(tmp)*tmp));
        wdich=1;
        do jj=1 to n;
          if ((w[jj,1] ^= max(w)) & (w[jj,1] ^= min(w))) then;do;wdich=0;goto leave2;
          end;
        end;
        leave2:
        if (model = 3) then;do;jndich=wdich;jnmin=min(w);jnmax=max(w);
        end;
        if (wdich = 0) then;do;
          matw=(wmean-wsd)//wmean//(wmean+wsd);quantc[1,1]=1;
		  if ((&wmodval=999) & (quantile=0)) then;do;
		    if (matw[1,1] < min(w)) then;do;matw[1,1]=min(w);minprobe=1;end;
		    if (matw[3,1] > max(w)) then;do;matw[3,1]=max(w);maxprobe=1;end;
		  end;
          if (quantile = 1) then;do;
            quantd[1,1]=1;quantc[1,1]=0;tmp=w;tmp[rank(tmp)]=w;
            matw=tmp[floor(n*0.10),1]//tmp[floor(n*0.25),1]//tmp[floor(n*0.5),1]//tmp[floor(n*0.75),1]//tmp[floor(n*0.9),1];
          end;
        end;
        if (wdich=1) then;do;matw=min(w)//max(w);wvdich=1;cmaxw=max(w);cminw=min(w);
        end;
        if (&wmodval ^= 999) then;do;matw=&wmodval;quantd[1,1]=0;quantc[1,1]=0;
        end;
        modmatv[1,1]=nrow(matw);
        modmat[(1:nrow(matw)),1]=matw;
        modvnm[1,1]=wname;
        modmatp[1,1]=1;
      end;
    end;
    if ((zerr=0) & (zlist=1)) then;do;
      if (vnames[,i]=zname) then;do;
        zerr=0;zmatch=1;z=dat[,i];
        if (center = 1) then;do;
          zmean=z[+,]/n;meanvec=j(n,1,zmean);z=z-meanvec;centvar=centvar||zname;
        end;
        nvarch[1,i]=1;nmods=nmods+1;zmean=z[+,]/n;tmp=z-(cons*zmean);
        zsd=sqrt((1/(n-1))*(t(tmp)*tmp));
        zdich=1;
        do jj=1 to n;
          if ((z[jj,1] ^= max(z)) & (z[jj,1] ^= min(z))) then;do;zdich=0;goto leave3;
          end;
        end;
        leave3:
        if (zdich = 0) then;do;
          matz=(zmean-zsd)//zmean//(zmean+zsd);quantc[1,2]=1;
		  if ((&zmodval=999) & (quantile=0)) then;do;
		    if (matz[1,1] < min(z)) then;do;matz[1,1]=min(z);minprobe=1;end;
		    if (matz[3,1] > max(z)) then;do;matz[3,1]=max(z);maxprobe=1;end;
		  end;
          if (quantile = 1) then;do;
            quantd[1,2]=1;quantc[1,2]=0;tmp=z;tmp[rank(tmp)]=z;
            matz=tmp[floor(n*0.10),1]//tmp[floor(n*0.25),1]//tmp[floor(n*0.5),1]//tmp[floor(n*0.75),1]//tmp[floor(n*0.9),1];
          end;
        end;
        if (zdich=1) then;do;matz=min(z)//max(z);cmaxz=max(z);cminz=min(z);zqdich=1;
        end;
        if (&zmodval ^= 999) then;do;matz=&zmodval;quantd[1,2]=0;quantc[1,2]=0;
        end;
        modmatv[1,2]=nrow(matz);
        modmat[(1:nrow(matz)),2]=matz;
        modvnm[1,2]=zname;
        modmatp[1,2]=1;
      end;
    end;
    if ((verr=0) & (vlist=1)) then;do;
      if (vnames[,i]=vname) then;do;
        verr=0;vmatch=1;v=dat[,i];
        if (center = 1) then;do;
          vmean=v[+,]/n;meanvec=j(n,1,vmean);v=v-meanvec;centvar=centvar||vname;
        end;
        nvarch[1,i]=1;nmods=nmods+1;vmean=v[+,]/n;tmp=v-(cons*vmean);
        vsd=sqrt((1/(n-1))*(t(tmp)*tmp));
        vdich=1;
        do jj=1 to n;
          if ((v[jj,1] ^= max(v)) & (v[jj,1] ^= min(v))) then;do;vdich=0;goto leave4;
          end;
        end;
        leave4:
        if (vdich = 0) then;do;
          matv=(vmean-vsd)//vmean//(vmean+vsd);quantc[1,3]=1;
		  if (&vmodval=999) then;do;
		    if (matv[1,1] < min(v)) then;do;matv[1,1]=min(v);minprobe=1;end;
		    if (matv[3,1] > max(v)) then;do;matv[3,1]=max(v);maxprobe=1;end;
		  end;
          if (quantile = 1) then;do;
            quantd[1,3]=1;quantc[1,3]=0;tmp=v;tmp[rank(tmp)]=v;
            matv=tmp[floor(n*0.10),1]//tmp[floor(n*0.25),1]//tmp[floor(n*0.5),1]//tmp[floor(n*0.75),1]//tmp[floor(n*0.9),1];
          end;
        end;
        if (vdich=1) then;do;matv=min(v)//max(v);wvdich=1;cmaxv=max(v);cminv=min(v);
        end;
        if (&vmodval ^= 999) then;do;matv=&vmodval;quantd[1,3]=0;quantc[1,3]=0;
        end;
        modmatv[1,3]=nrow(matv);
        modmat[(1:nrow(matv)),3]=matv;
        modvnm[1,3]=vname;
        modmatp[1,3]=1;
      end;
    end;
    if ((qerr=0) & (qlist=1)) then;do;
      if (vnames[,i]=qname) then;do;
        qerr=0;qmatch=1;q=dat[,i];
        if (center = 1) then;do;
          qmean=q[+,]/n;meanvec=j(n,1,qmean);q=q-meanvec;centvar=centvar||qname;
        end;
        nvarch[1,i]=1;nmods=nmods+1;qmean=q[+,]/n;tmp=q-(cons*qmean);
        qsd=sqrt((1/(n-1))*(t(tmp)*tmp));
        qdich=1;
        do jj=1 to n;
          if ((q[jj,1] ^= max(q)) & (q[jj,1] ^= min(q))) then;do;qdich=0;goto leave5;
          end;
        end;
        leave5:
        if (qdich = 0) then;do;
          matq=(qmean-qsd)//qmean//(qmean+qsd);quantc[1,4]=1;
		  if ((&qmodval=999) & (quantile = 0)) then;do;
		    if (matq[1,1] < min(q)) then;do;matq[1,1]=min(q);minprobe=1;end;
		    if (matq[3,1] > max(q)) then;do;matq[3,1]=max(q);maxprobe=1;end;
		  end;
          if (quantile = 1) then;do;
            quantd[1,4]=1;quantc[1,4]=0;tmp=q;tmp[rank(tmp)]=q;
            matq=tmp[floor(n*0.10),1]//tmp[floor(n*0.25),1]//tmp[floor(n*0.5),1]//tmp[floor(n*0.75),1]//tmp[floor(n*0.9),1];
          end;
        end;
        if (qdich=1) then;do;matq=min(q)//max(q);cmaxq=max(q);cminq=min(q);zqdich=1;
        end;
        if (&qmodval ^= 999) then;do;matq=&qmodval;quantd[1,4]=0;quantc[1,4]=0;
        end;
        modmatv[1,4]=nrow(matq);
        modmat[(1:nrow(matq)),4]=matq;
        modvnm[1,4]=qname;
        modmatp[1,4]=1;
      end;
    end;
    if (vnames[,i]=clname) then;do;
      cld=dat[,i];cvname=vnames[,i];nvarch[1,i]=1;clsmtch=1;
    end;
    do j = 1 to ncol(mnames);
      if (vnames[,i]=mnames[1,j]) then;do;
        mmatch=mmatch+1;m[,j]=dat[,i];
        if ((center=1) & (nvarch[1,i]=0) & (mlist > 0) & (mcm = 0)) then;do;
          tmp=m[,j];
          meanvec=j(n,1,(tmp[+,]/n));m[,j]=m[,j]-meanvec;mmmm=m[,j];
          centvar=centvar||mnames[1,j];
        end;
        nvarch[1,i]=1;
        dichm=1;
        do jj=1 to n;
          if ((m[jj,j] ^= max(m[,j])) & (m[jj,j] ^= min(m[,j]))) then;do;dichm=0;goto leave6;
          end;
        end;
        leave6:
		if ((dichm=1) & (olsdichm =1)) then;do;note[notes,1]=18;notes=notes+1;end;
        if ((dichm=1) & (model > 3) & (mcheck = 0) & (olsdichm=0)) then;do;errs=errs+1;runerrs[errs,1]=1;mcheck=1;
        end;
        if ((model <=3) & (ncol(mnames) = 1)) then;do;
          tmp=m[,j];
          nmods=nmods+1;mmean=tmp[+,]/n;tmp=m[,j]-(cons*mmean);
          msd=sqrt((1/(n-1))*(t(tmp)*tmp));
          mdich=1;
          do jj=1 to n;
            if ((m[jj,j] ^= max(m[,j])) & (m[jj,j] ^= min(m[,j]))) then;do;mdich=0;goto leave7;
            end;
          end;
          leave7:
          if (model = 1) then;do;jndich=mdich;jnmin=min(m[,j]);jnmax=max(m[,j]);
          end;
          if (mdich=0) then;do;
            matm=(mmean-msd)//mmean//(mmean+msd);quantc[1,5]=1;
			if ((&mmodval=999) & (quantile=0)) then;do;
			  if (matm[1,1] < min(m[,j])) then;do;matm[1,1]=min(m[,j]);minprobe=1;end;
		      if (matm[3,1] > max(m[,j])) then;do;matm[3,1]=max(m[,j]);maxprobe=1;end;
			end;
            if (quantile = 1) then;do;
              quantd[1,5]=1;quantc[1,5]=0;tmp=m[,j];tmp[rank(tmp)]=m[,j];
              matm=tmp[floor(n*0.10),1]//tmp[floor(n*0.25),1]//tmp[floor(n*0.5),1]//tmp[floor(n*0.75),1]//tmp[floor(n*0.9),1];
            end;
          end;
          if (mdich = 1) then;do;matm=min(m)//max(m);
          end;
          if (&mmodval ^= 999) then;do;
            matm=&mmodval;quantd[1,5]=0;quantc[1,5]=0;
          end;
          modmatv[1,5]=nrow(matm);
          modmat[(1:nrow(matm)),5]=matm;
          modvnm[1,5]=mnames[1,j];
          modmatp[1,5]=1;
        end;
      end;
    end;
  end; 
  if (minprobe=1)then;do;note[notes,1]=14;notes=notes+1;end;
  if (maxprobe=1)then;do;note[notes,1]=15;notes=notes+1;end;
  if ((clname ^= "XXX") & (clsmtch = 0)) then;do;errs=errs+1;runerrs[errs,1]=23;
  end;
  if (clname ^= "XXX") then;do;
    if ((clname=zname) | (clname=vname) | (clname=wname) | (clname=xname) | (clname=yname) | (clname=qname)) then;do;
      errs=errs+1;runerrs[errs,1]=24;
    end;
  end;
  if ((wlist=1) & (werr=0) & (wmatch=0)) then;do;werr=3;errs=errs+1;runerrs[errs,1]=4;
  end;
  if ((zlist=1) & (zerr=0) & (zmatch=0)) then;do;zerr=3;errs=errs+1;runerrs[errs,1]=5;
  end;
  if ((qlist=1) & (qerr=0) & (qmatch=0)) then;do;qerr=3;errs=errs+1;runerrs[errs,1]=6;
  end;
  if ((vlist=1) & (verr=0) & (vmatch=0)) then;do;verr=3;errs=errs+1;runerrs[errs,1]=7;
  end;
  if (yerr = 1) then;do;errs=errs+1;runerrs[errs,1]=16;
  end;
  if (xerr = 1) then;do;errs=errs+1;runerrs[errs,1]=32;
  end;
  if ((model=6) & (nmeds < 2)) then;do;errs=errs+1;runerrs[errs,1]=18;
  end;
  if (mmatch < ncol(mnames)) then;do;errs=errs+1;runerrs[errs,1]=25;
  end;

  if (clname ^= "XXX") then;do;
    cld=design(cld);cluster=ncol(cld);cld=cld[,2:ncol(cld)];clsdmy=ncol(cld);
    if (clsdmy > 19) then;do;errs=errs+1;runerrs[errs,1]=26;
    end;
    if ((mcx > 0) | (mcm > 0)) then;do;errs=errs+1;runerrs[errs,1]=38;end;
  end;
  dichy=1;
  do jj=1 to n;
    if ((y[jj,1] ^= max(y)) & (y[jj,1] ^= min(y))) then;do;dichy=0;goto leave8;
    end;
    leave8:
  end;
  if ((dichy=1) & (olsdichy = 1)) then;do;note[notes,1]=18;notes=notes+1;end;
  if (dichy = 1) then;do;
    if (toteff=1) then;do;
      toteff=0;
      note[notes,1] = 31;
      notes = notes + 1;
    end;
    jncrit=xp2*xp2;
    if (ws=1) then;do;criterr=1;errs=errs+1;runerrs[errs,1]=28;end;
  end;
  ncovs = ncol(dat)-nvarch[,+];
  if ((effsize=1) & (covmy ^= 0) & (ncovs > 0) & (model > 3) & (model < 7)) then;do;
    note[notes,1]=22;notes=notes+1;effsize=0;
  end;
  if (ws=1 & ncovs < nmeds) then;do;criterr=1;errs=errs+1;runerrs[errs,1]=29;end;
  if (ws=1 & ncovs > nmeds) then;do;criterr=1;errs=errs+1;runerrs[errs,1]=30;end;

end; 

if (errs = 0) then;do;  *[cccc];
  tmp1=quantd[,+];tmp2=quantc[,+];  
  if (tmp1 > 0) then;do;note[notes,1]=4;notes=notes+1;
  end;
  if (tmp2 > 0) then;do;note[notes,1]=5;notes=notes+1;
  end;
  if (ncovs > 0) then;do;
    c=j(n,ncovs,0);cnames={"x"};j=1;
    do i = 1 to ncol(vnames);
      if (nvarch[1,i]=0) then;do;
        c[,j]=dat[,i];nvarch[1,i]=1;j=j+1;cnames=cnames||vnames[,i];
      end;
    end;
    cnames=cnames[1,2:ncol(cnames)];
    if (ws=1) then;do;
	   covmean=c[+,]/n;
	   do i = 1 to ncovs;
	     meanvec=j(n,1,covmean[1,i]);
		 c[,i]=c[,i]-meanvec;
	   end;
	   centvar=centvar||cnames;
       x=c[,1:ncovs];
	   if (ncovs=nmeds) then;do;ncovs=0;end;
	end;
  end;
  names=yname||xname||mnames||wname||zname||vname||qname;
  if (ncovs > 0) then;do;
    names=names||cnames;
  end;
  if ((dichy=1) & (effsize=1)) then;do;
    note[notes,1]=2;notes=notes+1;
  end;
  if ((model > 3) & (model < 6)) then;do;
    indeff=j(nmeds,1,0);indboot=j((boot+1),nmeds,999);
	if (mc > 0) then;do;indboot=j((mc+1),nmeds,999);end;
    if ((effsize=1) & (dichy=0)) then;do;
      rmeff=j((boot+1),(nmeds+1),999);
      abpseff=j((boot+1),(nmeds+1),999);
      abcseff=j((boot+1),(nmeds+1),999);
      pmeff=j((boot+1),(nmeds+1),999);
      r245=j((boot+1),1,999);
      kappa2=j((boot+1),1,999);
    end;
  end;
  if ((model = 6) & (effsize=1) & (dichy=0)) then;do;
    rmeff=j((boot+1),ncol(indboot),999);
    abpseff=j((boot+1),ncol(indboot),999);
    abcseff=j((boot+1),ncol(indboot),999);
    pmeff=j((boot+1),ncol(indboot),999);
  end;
  if (nmods > 0) then;do;
    tmp=1;
    do i = 1 to 5;
      if (modmatp[1,i]=1) then;do;
        modmat[,tmp]=modmat[,i];modvnm[1,tmp]=modvnm[1,i];modmatv[1,tmp]=modmatv[1,i];
        tmp=tmp+1;
      end;
    end;
    modmat=modmat[,(1:nmods)];modvnm=modvnm[,(1:nmods)];modmatv=modmatv[,(1:nmods)];
    do i = 1 to (ncol(modmatv)-1);
      tmp=1;
      do j = (i+1) to ncol(modmatv);
        tmp=tmp*modmatv[1,j];
      end;
      modprod[1,i]=tmp;
    end;
    modvals=j((modmatv[1,1]*modprod[1,1]),nmods,0);
    do i = 1 to nmods;
      strt=1;fnsh=0;
      do while (fnsh < nrow(modvals));
        do j = 1 to modmatv[1,i];
          tmp=j(modprod[1,i],1,modmat[j,i]);
          fnsh=fnsh+nrow(tmp);
          modvals[(strt:fnsh),i]=tmp;
          strt=fnsh+1;
        end;
      end;
    end;
    if (model = 74) then;do;modvals=matx;modvnm=xname;
    end;
    vmat=j(8,nrow(modvals),0);
    vmat[1,1:nrow(modvals)]=j(1,nrow(modvals),1);
    vmat[5,1:nrow(modvals)]=j(1,nrow(modvals),1);
	indeff=j(nrow(modvals),1,0);
    if (model ^= 5) then;do;
      indboot=j(((boot+1)*nmeds),nrow(modvals),-99999999);
      indbootp=j((boot+1),(nmeds*nmods),-99999999);
      if ((imm > 4) & (imm < 8)) then;do;
        if (imm = 7) then;do;immmv1=matw;immmv2=matv;end;
		if (imm = 5) then;do;immmv1=matw;immmv2=matz;end;
		if (imm = 6) then;do;immmv1=matv;immmv2=matq;end;
		indboop1=j((boot+1),(nmeds*(nrow(immmv2))),-99999999);
		indboop2=j((boot+1),(nmeds*(nrow(immmv1))),-99999999);
		onesmv1=j(1,nrow(immmv1),1);onesmv2=j(1,nrow(immmv2),1);
		nimvs=nrow(immmv1)+nrow(immmv2);
		cmmval=0;cmmlbs1={"xx"};cmmlbs2={"xx"};
		do i = 1 to nmeds;
          cmmval=cmmval//immmv2;
		  cmmlbt=j(nrow(immmv2),1,mnames[1,i]);
		  cmmlbs1=cmmlbs1//cmmlbt;
		end;
		do i = 1 to nmeds;
          cmmval=cmmval//immmv1;
		  cmmlbt=j(nrow(immmv1),1,mnames[1,i]);
		  cmmlbs2=cmmlbs2//cmmlbt;
		end;
        cmmval=cmmval[2:nrow(cmmval),];
	  end;
    end;
  end;
  if (nmods > 0) then;do;
    do i = 1 to ncol(modvals);
      if (modvnm[1,i]=wname) then;do;wcol=i;
      end;
      if (modvnm[1,i]=zname) then;do;zcol=i;
      end;
      if (modvnm[1,i]=vname) then;do;vcol=i;
      end;
      if (modvnm[1,i]=qname) then;do;qcol=i;
      end;
    end;
  end;
  if (dichy=1) then;do;
    omx=max(y);omn=min(y);y=(y=omx);rcd=omn||0;rcd1=omx||1;rcd=rcd//rcd1;
  end;
  data=cons||y||m||x;
  datamed=data;datayed=data;
  datanm={"CONSTANT"}//yname//t(mnames)//xname;
  datanmm={"CONSTANT"}//yname//t(mnames)//xname;
  datanmy={"CONSTANT"}//yname//t(mnames)//xname;
  yintkey={" "}||{" "}||{" "}||{" "}||{" "}||{" "};
  if ((model < 4) & (errs = 0)) then;do;
    yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||mnames||{" "}||{" "};yintkey=yintkey//yintkeyt;
    datayed=datayed||(x#m);
    datanmy=datanmy//yintemp[1,intcnt];
    intcnt=intcnt+1;
    do i = 1 to nrow(modvals);
      vmat[1,i]=1;
      vmat[2,i]=modvals[i,1];
    end;
  end;
  if ((model = 2) | (model = 3)) then;do;
    int1=x#w;
    datayed=datayed||w||int1;
    yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||wname||{" "}||{" "};yintkey=yintkey//yintkeyt;
    datanmy=datanmy//wname//yintemp[1,intcnt];
    intcnt=intcnt+1;
    do i = 1 to nrow(modvals);
      vmat[2,i]=modvals[i,2];
      vmat[3,i]=modvals[i,1];
      vmat[4,i]=modvals[i,1]#modvals[i,2];
    end;
  end;
  if (model = 3) then;do;
    yintkeyt=yintemp[1,intcnt]||mnames||{"  X"}||wname||{"  "}||{"   "};yintkey=yintkey//yintkeyt;
    datanmy=datanmy//yintemp[1,intcnt];
    intcnt=intcnt+1;
    int1=w#m;int2=x#w#m;
    datayed=datayed||int1||int2;
    yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||mnames||{"  X"}||wname;yintkey=yintkey//yintkeyt;
    datanmy=datanmy//yintemp[1,intcnt];
    intcnt=intcnt+1;
  end;
  if ((model = 4) | (model = 5)) then;do;
    vmat=j(8,1,1);
  end;
  yintkey2=yintkey;
  if (wm = 1) then;do;
    int1=x#w;
    datamed=datamed||w||int1;
    yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||wname||{" "}||{" "};yintkey=yintkey//yintkeyt;
    datanmm=datanmm//wname//yintemp[1,intcnt];
    intcnt=intcnt+1;
    do i = 1 to nrow(modvals);
      vmat[2,i]=modvals[i,wcol];
    end;
    if (zm = 1) then;do;
      int1=x#z;
      datamed=datamed||z||int1;
      yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||zname||{" "}||{" "};yintkey=yintkey//yintkeyt;
      datanmm=datanmm//zname//yintemp[1,intcnt];
      intcnt=intcnt+1;
      do i = 1 to nrow(modvals);
        vmat[3,i]=modvals[i,zcol];
      end;
    end;
    if (wzm = 1) then;do;
      yintkeyt=yintemp[1,intcnt]||wname||{"  X"}||zname||{" "}||{" "};yintkey=yintkey//yintkeyt;
      datanmm=datanmm//yintemp[1,intcnt];
      intcnt=intcnt+1;
      yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||wname||{"  X"}||zname;yintkey=yintkey//yintkeyt;
      datanmm=datanmm//yintemp[1,intcnt];
      intcnt=intcnt+1;
      int1=w#z;
      int2=x#w#z;
      datamed=datamed||int1||int2;
      do i = 1 to nrow(modvals);
        vmat[4,i]=(modvals[i,wcol])#(modvals[i,zcol]);
      end;
    end;
  end;
  mdatcol=ncol(datamed);
  mintkey=yintkey;
  yintkey={" "}||{" "}||{" "}||{" "}||{" "}||{" "};
  medints=intcnt-1;
  if ((vy=1) | (xmy=1)) then;do;
    mp=1;
    do i = 1 to nrow(modvals);
      vmat[6,i]=modvals[i,1];
    end;
    if (vy=1) then;do;
      datayed=datayed||v;
      datanmy=datanmy//vname;
      mmods=1;
      do i = 1 to nrow(modvals);
        vmat[6,i]=modvals[i,vcol];
      end;
      if (qy=1) then;do;
        mp=2;datayed=datayed||q;
        datanmy=datanmy//qname;
        mmods=2;
        do i = 1 to nrow(modvals);
          vmat[7,i]=modvals[i,qcol];
        end;
      end;
      if (vqy=1) then;do;
        mp=3;datayed=datayed||(v#q);
        mmodls=3;
        do i = 1 to nrow(modvals);
          vmat[8,i]=modvals[i,vcol]#modvals[i,qcol];
        end;
      end;
    end;
    mints=j(n,(nmeds*mp),0);
    do i = 0 to (nmeds-1);
      if ((i = 0) & (vqy=1)) then;do;
        yintkeyt=yintemp[1,intcnt]||vname||{"  X"}||qname||{" "}||{" "};yintkey=yintkey//yintkeyt;
        datanmy=datanmy//yintemp[1,intcnt];
        intcnt=intcnt+1;
      end;
      if (vy=1) then;do;
        mints[,((i*mp)+1)]=m[,(i+1)]#v;
        yintkeyt=yintemp[1,intcnt]||mnames[1,(i+1)]||{"  X"}||vname||{" "}||{" "};yintkey=yintkey//yintkeyt;
        datanmy=datanmy//yintemp[1,intcnt];
        intcnt=intcnt+1;
      end;
      if (xmy=1) then;do;
        mints[,((i*mp)+1)]=m[,(i+1)]#x;
        yintkeyt=yintemp[1,intcnt]||mnames[1,(i+1)]||{"  X"}||xname||{" "}||{" "};yintkey=yintkey//yintkeyt;
        datanmy=datanmy//yintemp[1,intcnt];
        intcnt=intcnt+1;
      end;
      if (qy=1) then;do;
        mints[,((i*mp)+2)]=m[,(i+1)]#q;
        yintkeyt=yintemp[1,intcnt]||mnames[1,(i+1)]||{"  X"}||qname||{" "}||{" "};yintkey=yintkey//yintkeyt;
        datanmy=datanmy//yintemp[1,intcnt];
        intcnt=intcnt+1;
        if (vqy=1) then;do;
          mints[,((i*mp)+3)]=m[,(i+1)]#v#q;
          yintkeyt=yintemp[1,intcnt]||mnames[1,(i+1)]||{"  X"}||vname||{"  X"}||qname;yintkey=yintkey//yintkeyt;
          datanmy=datanmy//yintemp[1,intcnt];
          intcnt=intcnt+1;
        end;
      end;
    end;
    datayed=datayed||mints;
  end;
  mp=1;
  if (wvmy=1) then;do;
    mp=2;
    do i = 1 to nrow(modvals);
      vmat[8,i]=modvals[i,wcol]#modvals[i,vcol];
    end;
  end;
  mints2=j(n,(nmeds*mp),0);
  if (wmy=1) then;do;
    do i = 1 to nrow(modvals);
      vmat[7,i]=modvals[i,wcol];
    end;
    if ((wy=0) & (model > 3)) then;do;
      datayed=datayed||w;
      datanmy=datanmy//wname;
    end;
    do i = 0 to (nmeds-1);
      if ((i = 0) & (wvmy = 1)) then;do;
        datayed=datayed||(w#v);
        yintkeyt=yintemp[1,intcnt]||wname||{"  X"}||vname||{" "}||{" "};yintkey=yintkey//yintkeyt;
        datanmy=datanmy//yintemp[1,intcnt];
        intcnt=intcnt+1;
      end;
      mints2[,((i*mp)+1)]=m[,(i+1)]#w;
      yintkeyt=yintemp[1,intcnt]||mnames[1,(i+1)]||{"  X"}||wname||{" "}||{" "};yintkey=yintkey//yintkeyt;
      datanmy=datanmy//yintemp[1,intcnt];
      intcnt=intcnt+1;
      if (wvmy=1) then;do;
        mints2[,((i*mp)+2)]=m[,(i+1)]#w#v;
        yintkeyt=yintemp[1,intcnt]||mnames[1,(i+1)]||{"  X"}||wname||{"  X"}||vname;yintkey=yintkey//yintkeyt;
        datanmy=datanmy//yintemp[1,intcnt];
        intcnt=intcnt+1;
      end;
    end;
    datayed=datayed||mints2;
  end;
  mp=1;
  if (zmy=1) then;do;
    do i = 1 to nrow(modvals);
      vmat[6,i]=modvals[i,zcol];
    end;
    if (wzmy=1) then;do;
      mp=2;
      do i = 1 to nrow(modvals);
        vmat[8,i]=modvals[i,zcol]#modvals[i,wcol];
      end;
    end;
  end;
  if (zmy=1) then;do;
    mints3=j(n,(nmeds*mp),0);
    if (zy=0) then;do;
      datayed=datayed||z;
      datanmy=datanmy//zname;
    end;
    do i = 0 to (nmeds-1);
      if ((i=0) & (wzmy = 1) & (wzy=0)) then;do;
        datayed=datayed||(w#z);
        yintkeyt=yintemp[1,intcnt]||wname||{"  X"}||zname||{" "}||{" "};yintkey=yintkey//yintkeyt;
        datanmy=datanmy//yintemp[1,intcnt];
        intcnt=intcnt+1;
      end;
      mints3[,((i*mp)+1)]=m[,(i+1)]#z;
      yintkeyt=yintemp[1,intcnt]||mnames[1,(i+1)]||{"  X"}||zname||{" "}||{" "};yintkey=yintkey//yintkeyt;
      datanmy=datanmy//yintemp[1,intcnt];
      intcnt=intcnt+1;
      if (wzmy = 1) then;do;
        mints3[,((i*mp)+2)]=m[,(i+1)]#w#z;
        yintkeyt=yintemp[1,intcnt]||mnames[1,(i+1)]||{"  X"}||wname||{"  X"}||zname;yintkey=yintkey//yintkeyt;
        datanmy=datanmy//yintemp[1,intcnt];
        intcnt=intcnt+1;
      end;
    end;
    datayed=datayed||mints3;
  end;
  decoc=1;
  modmat=j(5,5,999);modmatv=j(1,5,1);modmatp=j(1,5,0);modprod=modmatv;
  if ((wy = 1) & (model > 3)) then;do;
    datayed=datayed||w||x#w;
    decoc=decoc+1;
    deco[decoc,1]=ncol(datayed)-1;
    modmatv[1,1]=nrow(matw);
    modmat[(1:nrow(matw)),1]=matw;
    modvnm2[1,1]=wname;
    modmatp[1,1]=1;
    yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||wname||{" "}||{" "};yintkey=yintkey//yintkeyt;
    datanmy=datanmy//wname//yintemp[1,intcnt];
    intcnt=intcnt+1;
  end;
  if (zy = 1) then;do;
    datayed=datayed||z||x#z;
    decoc=decoc+1;
    deco[decoc,1]=ncol(datayed)-1;
    modmatv[1,2]=nrow(matz);
    modmat[(1:nrow(matz)),2]=matz;
    modvnm2[1,2]=zname;
    modmatp[1,2]=1;
    yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||zname||{" "}||{" "};yintkey=yintkey//yintkeyt;
    datanmy=datanmy//zname//yintemp[1,intcnt];
    intcnt=intcnt+1;
  end;
  if (wzy = 1) then;do;
    datayed=datayed||w#z||x#w#z;
    decoc=decoc+1;
    deco[decoc,1]=ncol(datayed)-1;
    yintkeyt=yintemp[1,intcnt]||wname||{"  X"}||zname||{" "}||{" "};yintkey=yintkey//yintkeyt;
    datanmy=datanmy//yintemp[1,intcnt];
    intcnt=intcnt+1;
    yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||wname||{"  X"}||zname;yintkey=yintkey//yintkeyt;
    datanmy=datanmy//yintemp[1,intcnt];
    intcnt=intcnt+1;
  end;
  if (vxy = 1) then;do;
    datayed=datayed||x#v;
    decoc=decoc+1;
    deco[decoc,1]=ncol(datayed)-1;
    modmatv[1,3]=nrow(matv);
    modmat[(1:nrow(matv)),3]=matv;
    modvnm2[1,3]=vname;
    modmatp[1,3]=1;
    yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||vname||{" "}||{" "};yintkey=yintkey//yintkeyt;
    datanmy=datanmy//yintemp[1,intcnt];
    intcnt=intcnt+1;
    if (qxy = 1) then;do;
      datayed=datayed||x#q;
      decoc=decoc+1;
      deco[decoc,1]=ncol(datayed)-1;
      modmatv[1,4]=nrow(matq);
      modmat[(1:nrow(matq)),4]=matq;
      modvnm2[1,4]=qname;
      modmatp[1,4]=1;
      yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||qname||{" "}||{" "};yintkey=yintkey//yintkeyt;
      datanmy=datanmy//yintemp[1,intcnt];
      intcnt=intcnt+1;
      if (vqxy = 1) then;do;
        datayed=datayed||x#v#q;
        decoc=decoc+1;
        deco[decoc,1]=ncol(datayed)-1;
        yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||vname||{"  X"}||qname;yintkey=yintkey//yintkeyt;
        datanmy=datanmy//yintemp[1,intcnt];
        intcnt=intcnt+1;
      end;
    end;
  end;
  if (wvxy = 1) then;do;
    datayed=datayed||x#w#v;
    decoc=decoc+1;
    deco[decoc,1]=ncol(datayed)-1;
    yintkeyt=yintemp[1,intcnt]||xname||{"  X"}||wname||{"  X"}||vname;yintkey=yintkey//yintkeyt;
    datanmy=datanmy//yintemp[1,intcnt];
    intcnt=intcnt+1;
  end;
  modvalsd=0;ttt=modmatp[,+];ssss=modmatp[,+];
  if (ssss > 0) then;do;
    tmp=1;
    do i = 1 to 5;
      if (modmatp[1,i]=1) then;do;
        modmat[,tmp]=modmat[,i];
        modvnm2[1,tmp]=modvnm2[1,i];
        modmatv[1,tmp]=modmatv[1,i];
        tmp=tmp+1;
      end;
    end;
    modmat=modmat[,(1:ttt)];
    modvnm2=modvnm2[,(1:ttt)];
    modmatv=modmatv[,(1:ttt)];
    do i = 1 to (ncol(modmatv)-1);
      tmp=1;
      do j = (i+1) to ncol(modmatv);
        tmp=tmp*modmatv[1,j];
      end;
      modprod[1,i]=tmp;
    end;
    modvalsd=j((modmatv[1,1]*modprod[1,1]),ttt,0);
    do i = 1 to ttt;
      strt=1;fnsh=0;
      do while (fnsh < nrow(modvalsd));
        do j = 1 to modmatv[1,i];
          tmp=j(modprod[1,i],1,modmat[j,i]);
          fnsh=fnsh+nrow(tmp);
          modvalsd[(strt:fnsh),i]=tmp;
          strt=fnsh+1;
        end;
      end;
    end;
  end;
  if (ttt > 0) then;do;
    do i = 1 to ncol(modvalsd);
      if (modvnm2[1,i] = wname) then;do;wcol=i;
      end;
      if (modvnm2[1,i] = zname) then;do;zcol=i;
      end;
      if (modvnm2[1,i] = vname) then;do;vcol=i;
      end;
      if (modvnm2[1,i] = qname) then;do;qcol=i;
      end;
    end;
    directv=j(nrow(modvalsd),1,1);
    if (wy=1) then;do;directv=directv||modvalsd[,wcol];
    end;
    if (zy=1) then;do;directv=directv||modvalsd[,zcol];
    end;
    if (wzy=1) then;do;directv=directv||(modvalsd[,wcol])#(modvalsd[,zcol]);
    end;
    if (vxy=1) then;do;directv=directv||modvalsd[,vcol];
    end;
    if (qxy=1) then;do;directv=directv||modvalsd[,qcol];
    end;
    if (vqxy=1) then;do;directv=directv||(modvalsd[,vcol])#(modvalsd[,qcol]);
    end;
    if (wvxy=1) then;do;directv=directv||(modvalsd[,vcol])#(modvalsd[,wcol]);
    end;
  end;
  ydatacol=ncol(datayed);
  if (ncovs > 0) then;do;
    if (covmy ^= 2) then;do;
      datamed=datamed||c;
    end;
    if (covmy ^= 1) then;do;
      datayed=datayed||c;
    end;
    if ((covmy=1) & (model = 4) & (mcx > 0)) then;do;datayed=datayed||c;end;
    covmeans=c[+,]/n;
  end;
  if (cluster > 0) then;do;
    datamed=datamed||cld;
    datayed=datayed||cld;
    cldmeans=cld[+,]/n;
  end;
  mst=3;
  mnd=mst+nmeds-1;
  ydatacol=ncol(datayed);
  mdatacol=ncol(datamed);
  if (ncovs > 0) then;do;
    datanmy=datanmy//(cnames`);
    if (model > 3) then;do;
      datanmm=datanmm//(cnames`);
    end;
  end;
  datanmy={"constant"}//datanmy[3:nrow(datanmy),1];
  if (model > 3) then;do;
    datanmm={"constant"}//datanmm[3:nrow(datanmm),1];
  end;
  amm=j(2,1,0);abmm=j(2,1,0);mnv=datayed[,2]/n;mnv=mnv[+,];mnv=j(n,1,mnv);
  ssty=(datayed[,2]-mnv)##2;ssty=ssty[+,];
  sigma=(n*t(datayed)*datayed)-(t(datayed[+,])*datayed[+,]);
  sigma=sigma/(n*(n-1));
  if (ws=1) then;do;
    stddevm=vecdiag(sigma);stddevm=sqrt(stddevm[3:(nmeds+2),1]);
  end;
  stddevy=sqrt(sigma[2,2]);
  stddevx=sqrt(sigma[(3+nmeds),(3+nmeds)]);
  r2xy=(sigma[2,(3+nmeds)]/(stddevy*stddevx))##2;
  r2my=(sigma[2,3]/(stddevy*sqrt(sigma[3,3])))##2;
  ctot=sigma[2,(3+nmeds)]/sigma[(3+nmeds),(3+nmeds)];
  if ((model = 4) & (nmeds = 1) & (cluster = 0) & (ncovs = 0)) then;do;
    kappaa=sigma[2,3]*sigma[2,4];
    kappab=sqrt((sigma[3,3]*sigma[2,2])-(sigma[2,3]*sigma[2,3]));
    kappac=sqrt((sigma[4,4]*sigma[2,2])-(sigma[2,4]*sigma[2,4]));
    kappad=sigma[4,4]*sigma[2,2];
    kappae=sqrt((sigma[4,4]*sigma[3,3])-(sigma[3,4]*sigma[3,4]));
    amm[1,1]=(kappaa+(kappab*kappac))/kappad;
    amm[2,1]=(kappaa-(kappab*kappac))/kappad;
    if (sigma[3,4] < 0) then;do;
      amma=min(amm);
    end;
    if (sigma[3,4] > 0) then;do;
      amma=max(amm);
    end;
    abmm[1,1]=-amma*(kappac/kappae);
    abmm[2,1]=amma*(kappac/kappae);
  end;
  datatm=datamed;
  dataty=datayed;
  mdlnms2=compress(char(model))//yname//xname;
  mdlnms={"Model ="}//{"Y     = "}//{"X     = "};
  if (ws=1) then;do;
    mdlnms2=compress(char(model))//yname;
    mdlnms={"Model ="}//{"Y     = "};
  end;
  do i = 1 to ncol(mnames);
    mdlnms2=mdlnms2//mnames[1,i];
    if ((i=1) & (ncol(mnames)=1)) then;
      mdlnms=mdlnms//{"M     = "};
      else mdlnms=mdlnms//mlab[i,1];
  end;
  if (wname ^= "XXX") then;do;
    mdlnms2=mdlnms2//wname;
    mdlnms=mdlnms//{"W     = "};
  end;
  if (zname ^= "XXX") then;do;
    mdlnms2=mdlnms2//zname;
    mdlnms=mdlnms//{"Z     = "};
  end;
  if (vname ^= "XXX") then;do;
    mdlnms2=mdlnms2//vname;
    mdlnms=mdlnms//{"V     = "};
  end;
  if (qname ^= "XXX") then;do;
    mdlnms2=mdlnms2//qname;
    mdlnms=mdlnms//{"Q     = "};
  end;
  if ((jn = 1) & (model = 1) & (jndich = 1)) then;do;
    note[notes,1]=8;
    notes=notes+1;
  end;
  if ((jn = 1) & (model = 3) & (jndich = 1)) then;do;
    note[notes,1]=8;
    notes=notes+1;
  end;
  mdpbe=0;
  medte2=0;
  if ((model=4) & (mcx > 0)) then;do;medte2=1;end;
  if (((mcx > 0) | (mcm > 0)) & (model=1)) then;do;
   mdpbe=1;
   dd=datayed[,4]||datayed[,3];
	if (ncovs > 0) then;do;dd=datayed[,6:(5+ncovs)]||dd;end;
	dd=datayed[,2]||dd;
  end;
  yes=0;yes2=0;
  if (ncontr=1) then;do;
    if (contrast=1) then;do;
      yes=((nrow(modvals)=1) & (contrast=1) & (model = 3 | model = 2));
      yes2=((nrow(modvals)=1) & (contrast=1) & (model = 2));
    end;
  end;
  print "************************ PROCESS Procedure for SAS 2.16.1 ********************************";
  print "Written by Andrew F. Hayes, Ph.D.  http://www.afhayes.com";
  print "Documentation available in Hayes (2013).  www.guilford.com/p/hayes3";
  print "******************************************************************************************";
  print mdlnms2 [rowname = mdlnms label = "Model and Variables"];
  if (ncovs > 0) then;do;
    print cnames [label = "Statistical controls:"];
  end;
  print n [label = "Sample size:" format = 7.0];
  if (cluster > 0) then;do;
    print cluster [label = "Clustering variable and number of clusters:" rowname = cvname];
  end;
  if ((model > 3) & (&seed ^= 0)) then;do;
    seedt=&seed;
	print seedt [label = "Custom seed:"];
  end;
  if ((mdpbe=0) & (medte2=0)) then;do; 

  
  do bt = 1 to (boot+1); *[b];
    if ((bt = 2) & (savboot = 1)) then;do;
	   bootstrp=j(boot,ncol(bootcoef),-999);
	end;
	bootcoef=0;
    if (bt > 1) then;do;
      rk=1;
      do while (rk = 1); 
        v=floor((ranuni(j(n,1,&seed)))*n)+1;
        datayed=dataty[v,];
        detcheck=det(t(datayed)*datayed);
		rk=(detcheck=0);
        if (model > 3) then;do;
		  datamed=datatm[v,];
		  detcheck=det(t(datamed)*datamed);
		  if (rk=1) then;do;rk=(detcheck=0);end;
        end;
		sigma=(n*t(datayed)*datayed)-(t(datayed[+,])*datayed[+,]);
        sigma=sigma/(n*(n-1));
        temp=vecdiag(sigma);
        * rk=temp[2:nrow(temp),1];*rk=(rk = 0);*rk=rk[+,];
		bad=bad+rk;
		false=1;
      end;
      stddevy=sqrt(sigma[2,2]);
	  stddevx=sqrt(sigma[(3+nmeds),(3+nmeds)]);
	  ctot=sigma[2,(3+nmeds)]/sigma[(3+nmeds),(3+nmeds)];
      if ((model = 4) & (nmeds = 1) & (cluster = 0) & (ncovs = 0)) then;do;
	    r2xy=(sigma[2,4]/(stddevy*stddevx))##2;
        r2my=(sigma[2,3]/(stddevy*sqrt(sigma[3,3])))##2;
        sstot=sigma[2,2]*(n-1);
        kappaa=sigma[2,3]*sigma[2,4];
        kappab=sqrt((sigma[3,3]*sigma[2,2])-(sigma[2,3]*sigma[2,3]));
        kappac=sqrt((sigma[4,4]*sigma[2,2])-(sigma[2,4]*sigma[2,4]));
        kappad=sigma[4,4]*sigma[2,2];
        kappae=sqrt((sigma[4,4]*sigma[3,3])-(sigma[3,4]*sigma[3,4]));
        amm[1,1]=(kappaa+(kappab*kappac))/kappad;
        amm[2,1]=(kappaa-(kappab*kappac))/kappad;
        if (sigma[3,4] < 0) then;do;
          amma=min(amm);
        end;
        if (sigma[3,4] > 0) then;do;
          amma=max(amm);
        end;
        abmm[1,1]=-amma*(kappac/kappae);
        abmm[2,1]=amma*(kappac/kappae);
      end;
	end;
	* mediator model;
    if (model > 3) then;do; 
      do im = 1 to nmeds;
	    xm=cons||datamed[,((mnd+1):mdatacol)];
		xmnm={"Constant"}//datanmm[((2+nmeds):nrow(datanmm)),1];
		invxtx=inv(xm`*xm);
		coeff=invxtx*xm`*datamed[,(2+im)];
        if (model = 6) then;do;
		  if (im = 1) then;do;
		    xm=cons||datamed[,((mnd+1):mdatacol)];
            invxtx=inv(xm`*xm);
			coeff=invxtx*xm`*datamed[,(2+im)];
		  end;
		  if (im > 1) then;do;
		    xm=cons||datamed[,(3:(im+1))]||datamed[,((mnd+1):mdatacol)];
			xmnm={"Constant"}//datanmm[(2:im),1]//datanmm[(mnd:nrow(datanmm)),1];
			invxtx=inv(xm`*xm);
			coeff=invxtx*xm`*datamed[,(2+im)];
			mmpaths[(im+1),(2:im)]=(coeff[(2:im),1])`;
		  end;
		end;
		if (ws=1) then;do;
		  coeff[1,1]=datamed[+,(2+im)]/n;
		end;
		bootcoef=bootcoef||(coeff[1:(nrow(coeff)-clsdmy),1])`;
        if (bt = 1) then;do;
		  resid=datamed[,(2+im)]-xm*coeff;
		  sse=ssq(resid);
          mse=sse/(n-ncol(xm));
		  mnv=data[,(2+im)];mnv=mnv[+,]/n;mnv=j(n,1,mnv);
          sstm=(data[,(2+im)]-mnv)##2;sstm=sstm[+,];
		  k3=nrow(coeff);
		  if (hc3 = 1) then;do;
		    h=xm[,1];
			do i3 = 1 to n;
			  h[i3,1]=xm[i3,]*invxtx*(xm[i3,])`;
			end;
			do i3 = 1 to k3;
			  xm[,i3]=(resid[,ncol(resid)]/(1-h))#(xm[,i3]);
			end;
		  end;
		  if (hc3 ^= 1) then;do;
		    do i3 = 1 to k3;
			  xm[,i3]=sqrt(mse)#xm[,i3];
			end;
		  end;
		  lmat=I(nrow(coeff));
		  lmat=lmat[,2:ncol(lmat)];
		  hccov=invxtx*xm`*xm*invxtx;
		  mcmats[im,im]=hccov[2,2];
          dfnum=nrow(coeff)-1;
		  dfden=n-dfnum-1;
          fratio=(((lmat`)*coeff)`*inv(lmat`*hccov*lmat)*(lmat`*coeff))/dfnum;
          coeff=coeff[1:(nrow(coeff)-clsdmy),1];
		  mccoeff[im,1]=coeff[2,1];
		  standerr=sqrt(vecdiag(invxtx*xm`*xm*invxtx));
		  standerr=standerr[1:(nrow(standerr)-clsdmy),1];
		  if (ws=1) then;do;
		    standerr[1,1]=stddevm[im,1]/sqrt(n);
		  end;
          tratio=coeff/standerr;
		  p=2*(1-probt(abs(tratio),(n-ncol(xm))));
		  temp=(n-ncol(xm));
		  if (ws=1) then;do;
		    p=2*(1-probt(abs(tratio),(n-1)));
			temp=n-1;
          end;
		  xd=abs(xp2);
		  temp=(temp*(exp((temp-(5/6))*((xd/(temp-(2/3)+(.11/temp)))*(xd/(temp-(2/3)+(.11/temp)))))-1));
          temp1=coeff-sqrt(abs(temp))*standerr;
		  temp2=coeff+sqrt(abs(temp))*standerr;
		  op=coeff||standerr||tratio||p||temp1||temp2;
		  if (ws=1) then;do;
		    op=op[1,];
			xmnm=apathnam[((nmeds>1)+1+(im-1)),1];
		  end;
		  sobel[im,1]=coeff[2,1];
		  sobel[im,2]=standerr[2,1];
          temp=mnames[1,im];
		  r2full=1-(sse/sstm);
		  pfr=1-probf(fratio,dfnum,dfden);
		  summ=sqrt(r2full)||r2full||mse||fratio||dfnum||dfden||pfr;
          if (detail = 1) then;do;
		    print "*****************************************************************************************";
		    print temp [rowname = "Outcome:" label = " "];
			clnm = {"R" "R-sq" "MSE" "F" "df1" "df2" "p"};
            if (ws ^= 1) then;do;
              print summ [label = "Model Summary" colname = clnm format=&decimals rowname = " "];
			end;
			if (coeffci=0) then;do;
			  op=op[,1:(ncol(op)-2)];
            end;
			clnm = {"coeff" "se" "t" "p" "LLCI" "ULCI"};
			print op [label = "Model" colname = clnm rowname = xmnm format=&decimals];
			if (covcoeff=1) then;do;
              hccovtmp=hccov[1:nrow(op),1:nrow(op)];
			  cnamestp=xmnm`;
			  print hccovtmp [label = "Covariance matrix of regression parameter estimates" rowname=xmnm colname=cnamestp format=&decimals];
			end;
			if ((nmods > 0) & (nrow(mintkey) > 1)) then;do;
			  print mintkey [label = "Interactions:"];
			end;
			if (ws = 1) then;do;
			  wsdf=n-1;
			  tmpnamb={"df = "};
			  print wsdf [label = " " rowname=tmpnamb];
			end;
		  end;
	    end;
        ymat[1,im]=coeff[2,1];
		if (ws=1) then;do;
		  ymat[1,im]=coeff[1,1];
		end;
		if (wm = 1) then;do;
		  ymat[2,im]=coeff[4,1];
		  if (zm = 1) then;do;
		    ymat[3,im]=coeff[6,1];
			if (wzm = 1) then;do;
			  ymat[4,im]=coeff[8,1];
			end;
		  end;
		end;
        if (model = 6) then;do;
		  mmpaths[(im+1),1]=coeff[(im+1),1];
		end;
	  end;
	end; 

    * estimate model of outcome;
    do totlp = 1 to (1+(toteff*(bt=1))); *[d];
	  xy=cons||datayed[,3:ydatacol];
      if ((toteff=1) & (totlp = 2)) then;do;
        xy=cons||datayed[,(3+nmeds):ydatacol];
      end;	  
	  if (dichy = 1) then;do;
	    meany=datayed[,2];meany=meany[+,]/n;
	    pt2=j(nrow(datayed[,2]),1,meany);
	    LL3 = datayed[,2]#log(pt2)+(1-datayed[,2])#log(1-pt2);
	    LL3 = -2*LL3[+,];
	    pt1=j(n,1,0.5);
	    bt1=j(ncol(xy),1,0);
	    LL1=0;
	    LL2=LL3;
	    xy22=xy;
        do jjj= 1 to iterate UNTIL (abs(LL1-LL2) < converge);
	      LL1=LL2;
	      do ijk = 1 to ncol(xy);
		    xy22[,ijk]=xy[,ijk]#pt1#(1-pt1);
		  end;
		  coeff=bt1+inv(xy22`*xy)*xy`*(datayed[,2]-pt1);
		  pt1 = 1/(1+exp(-(xy*coeff)));
          temp1=((pt1 < .00000000000001) | (pt1 > .9999999999999));
		  itprob=temp1[+,];
		  if (itprob = 0) then;do;
		    LL=datayed[,2]#log(pt1)+(1-datayed[,2])#log(1-pt1);
		    LL2=-2*LL[+,];
		  end;
		  bt1=coeff;
	    end;
	    if ((jjj >= iterate) & (iterr = 0)) then;do;
	      errs=errs+1;runerrs[errs,1]=22;iterr=1;
	    end;
	    do ijk = 1 to ncol(xy);
          xy22[,ijk]=xy[,ijk]#pt1#(1-pt1);
	    end;
	    covmat=inv(xy22`*xy);
		if (totlp ^= 2) then;do;
		  bootcoef=bootcoef||(coeff[1:(nrow(coeff)-clsdmy),1])`;
		end;
	  end;
	  if (dichy = 0) then;do;
	    invxtx=inv(xy`*xy);
		coeff=invxtx*xy`*datayed[,2];
        if (effsize=1 & model > 3 & model < 7 & (ncovs > 0 | clsdmy > 0)) then;do;
          xysdy=cons||datayed[,(4+nmeds):ydatacol];
		  coeffsd=inv(xysdy`*xysdy)*xysdy`*datayed[,2];
          resid=datayed[,2]-(xysdy*coeffsd);
          sdycov=sqrt(ssq(resid)/(n-ncol(xysdy)));
		  xvaron=datayed[,(3+nmeds)];
		  coeffx2=inv(xysdy`*xysdy)*xysdy`*xvaron;
          residx2=xvaron-(xysdy*coeffx2);
          sdxcov=sqrt(ssq(residx2)/(n-ncol(xysdy)));
        end; 
		if (totlp ^= 2) then;do;
		  bootcoef=bootcoef||(coeff[1:(nrow(coeff)-clsdmy),1])`;
		end;
		if ((nmeds = 1) & (ncovs = 0) & (cluster = 0) & (model = 4) & (bt > 1)) then;do;
		  resid=datayed[,2]-xy*coeff;sse=ssq(resid);r2full=1-(sse/sstot);
		end;
		if (bt = 1) then;do;
		  resid=data[,2]-xy*coeff;
		  k3=nrow(coeff);
		  sse=ssq(resid);mse=sse/(n-ncol(xy));
		  hcnot=coeff/(sqrt(vecdiag(mse*invxtx)));
		  if (hc3 = 1) then;do;
		    h=xy[,1];
			do i3 = 1 to n;
			  h[i3,1]=xy[i3,]*invxtx*xy[i3,]`;
			end;
			do i3 = 1 to k3;
			  xy[,i3]=(resid[,ncol(resid)]/(1-h))#(xy[,i3]);
			end;
		  end;
          if (hc3 ^= 1) then;do;
		    do i3 = 1 to k3;
		      xy[,i3]=sqrt(mse)#xy[,i3];
		    end;
		  end;
		  covmat=invxtx*xy`*xy*invxtx;
	    end;
	  end;
	  if (bt = 1) then;do; *[f];
	    if (model=2) then;do;
		  xy2=cons||datayed[,3:ydatacol];
		  temp=ncol(xy2);
		  if (temp > 6) then;do;
		    xy3=xy2[,7:temp];
		  end;
		  xy2=xy2[,1:3]||xy2[,5];
          if (temp > 6) then;do;
		    xy2=xy2||xy3;
		  end;
		  invxtx=inv(xy2`*xy2);
		  coeff2=invxtx*xy2`*datayed[,2];
		  ssem2=ssq(datayed[,2]-xy2*coeff2);
		end;
		standerr=sqrt(vecdiag(covmat));
		if (totlp=1) then;do;
		  mcmats[(nmeds+1):ncol(mcmats),(nmeds+1):ncol(mcmats)]=covmat[2:(1+nmeds),2:(1+nmeds)];
		end;
		standerr=standerr[1:(nrow(standerr)-clsdmy),1];
		if (ws=1 & totlp=2) then;do;
		  standerr[1,1]=stddevy/sqrt(n);
		end;
		coeffplt=coeff;
		lmat=I(nrow(coeff));
		lmat=lmat[,2:ncol(lmat)];
		dfnum=nrow(coeff)-1;
		dfden=n-dfnum-1;
        fratio=(((lmat`)*coeff)`*inv(lmat`*covmat*lmat)*(lmat`*coeff))/dfnum;
		coeff=coeff[1:(nrow(coeff)-clsdmy),1];
		if (totlp=1) then;do;
		  mccoeff[(nmeds+1):nrow(mccoeff)]=coeff[2:(1+nmeds),1];
		end;
		bbbb=coeff[2,1];
        if (totlp = 1) then;do;
		  deco[1,1]=2+nmeds;
		  deco=deco[1:decoc,1];
		  covdirt=j((nrow(covmat)-clsdmy),(ncol(covmat)-clsdmy),0);
		  covdirt=covmat[deco,];
		  covdir=j(nrow(covdirt),nrow(covdirt),0);
		  covdir=covdirt[,deco`];
		  deco=coeff[deco,1];
		  if (ttt > 0) then;do;
		    sedir=sqrt(vecdiag(directv*covdir*directv`));
			directv=directv*deco;
		  end;
		  sobel[,3]=coeff[2:(1+nmeds),1];
		  sobel[,4]=standerr[2:(1+nmeds),1];
		  sobel2=sobel#sobel;
		  if (varorder ^= 2) then;do;
		    sobel[,2]=sqrt(sobel2[,1]#sobel2[,4]+sobel2[,3]#sobel2[,2]);
		  end;
		  if (varorder = 2) then;do;
		    sobel[,2]=sqrt(sobel2[,1]#sobel2[,4]+sobel2[,3]#sobel2[,2]+sobel2[,2]#sobel2[,4]);
		  end;
		  sobel[,1]=sobel[,1]#sobel[,3];
		  sobel[,3]=sobel[,1]/sobel[,2];
		  sobel[,4]=2*(1-probnorm(abs(sobel[,3])));
		end;
		if (dichy=0) then;do;
		  tratio=coeff/standerr;
		  p=2*(1-probt(abs(tratio),(n-ncol(xy))));
		  if ((ws=1) & (totlp=2)) then;do;
		    p=2*(1-probt(abs(tratio),(n-1)));
			dfden=n-1;
		  end;
          cnms="coeff"||"se"||"t"||"p"||"LLCI"||"ULCI";
		  op=coeff||standerr|tratio||p;
		end;
        if(dichy=1) then;do;
		  tratio=coeff/standerr;  
          p=2*(1-probnorm(abs(tratio)));
		  wald=tratio#tratio;
		  cnms="coeff"||"se"||"Z"||"p"||"LLCI"||"ULCI";
		  temp=coeff-abs(xp2)*standerr;
		  op=coeff||standerr||tratio||p||temp;
		  temp=coeff+abs(xp2)*standerr;
		  op=op||temp;
		end;
        if (detail = 1) then;do;
		  if (totlp=2) then;do;
		    print "********************************* TOTAL EFFECT MODEL *********************************";
		    print yname [rowname = "Outcome:" label = " "];
		  end;
		  if (totlp ^= 2) then;do;
		    print "*****************************************************************************************";
		    print yname [rowname = "Outcome:" label = " "];
		  end;
		end;
		if ((dichy=1) & (bt=1) & (totlp=1)) then;do;
		  nmsd=yname||"Analysis";
		  print rcd [label = "Coding of binary DV for analysis" colname = nmsd format = 9.2];
		end;
        if (dichy = 0) then;do;
		  r2full=1-(sse/ssty);
		  pfr=1-probf(fratio,dfnum,dfden);
		  jndf=dfden;
		  if (ws=1) then;do;
		    wsdf=dfden;
		  end;
		  xd=abs(xp2);
		  jncrit=(dfden*(exp((dfden-(5/6))*((xd/(dfden-(2/3)+(.11/dfden)))*(xd/(dfden-(2/3)+(.11/dfden)))))-1));
		  summ=sqrt(r2full)||r2full||mse||fratio||dfnum||dfden||pfr;
		  temp1=coeff-sqrt(jncrit)*standerr;
		  temp2=coeff+sqrt(jncrit)*standerr;
		  op=coeff||standerr||tratio||p||temp1||temp2;
		  if (detail = 1) then;do;
		    if (ws ^= 1) then;do;
		  	  clnm = {"R" "R-sq" "MSE" "F" "df1" "df2" "p"};
		      print summ [label = "Model Summary" colname = clnm format = &decimals rowname = " "];
			end;
		  end;
		end;
		if (dichy = 1) then;do;
		  LLdiff=LL3-LL2;
		  mcF = LLdiff/LL3;
		  cox=1-exp(-LLdiff/n);
		  nagel=cox/(1-exp(-(LL3)/n));
		  pf=LL2||LLdiff||mcF||cox||nagel||n;
		  if (detail = 1) then;do;
		    clnm = {"-2LL" "Model LL" "McFadden" "CoxSnell" "Nagelkrk" "n"};
		    print pf [label = "Logistic Regression Summary" colname = clnm format = &decimals rowname = " "];
		  end;
		end;
		if (totlp=2) then;do;
		  datanmy="constant"//datanmy[(nmeds+2):nrow(datanmy),1];
		end;
		if (detail = 1) then;do;
		  if (coeffci = 0) then;do;
		    op=op[,1:(ncol(op)-2)];
		  end;
		  if (ws = 1) then;do;
		    op2=op[1:(1+nmeds),];
			datanmy2="c' path"//bpathnam[(1+(nmeds>1)):((1+(nmeds>1))+(nmeds-1)),1];
			if (totlp=2) then;do;
			  datanmy2="c path";op2=op[1,];wsdf=n-1;
			end;
			print op2 [label = "Model" rowname=datanmy2 colname=cnms format = &decimals];  
			tmpnamb={"df = "};
		     print wsdf [label = " " rowname=tmpnamb];
          end;
		  if (ws ^= 1) then;do;
		    print op [label = "Model" rowname = datanmy colname=cnms format = &decimals];
		    if (covcoeff=1) then;do;
              covmattp=covmat[1:nrow(op),1:nrow(op)];
			  cnamestp=datanmy`;
			  print covmattp [label="Covariance matrix of regression parameter estimates" rowname=datanmy colname=cnamestp format=&decimals];
		    end;
		  end;
		end;
		if ((ttt = 0) & (totlp = 1)) then;do;
          deco=op[(nmeds+2),];
		  if (ws=1) then;do;
		    deco=op[1,];
		  end;
		end;
		if ((ttt = 0) & (totlp = 2)) then;do;
		  decotot = op[2,];
		  if (ws=1) then;do;
		    decotot=op[1,];
		  end;
		end;
		if ((nmods > 0) & (model > 4) & (detail = 1) & (nrow(yintkey) > 1)) then;do;
		  print yintkey [label = "Interactions:"];
		end;
		if ((nmods > 0) & (model < 4) & (detail = 1)) then;do;
		  print yintkey2 [label = "Interactions:"];
		  if (((model = 1) | (model = 2)) & (dichy = 0)) then;do;
            temp = (((op[4,3]#op[4,3])*(1-r2full))/dfden)||(op[4,3]#op[4,3])||1||dfden||op[4,4];
			if (hc3=1) then;do;
              temp[1,1]=((hcnot[4,1]*hcnot[4,1])*(1-r2full))/dfden;
            end;
			rnms=yintkey2[2,1];
			if (model = 2) then;do;
			  temp2=(((op[6,3]#op[6,3])*(1-r2full))/dfden)||(op[6,3]#op[6,3])||1||dfden||op[6,4];
              temp = temp//temp2;
			  if (hc3=1) then;do;
                temp[2,1]=((hcnot[6,1]*hcnot[6,1])*(1-r2full))/dfden;
              end;
			  frat2=(dfden*(r2full-(1-(ssem2/ssty))))/(2*(1-r2full));
			  if (hc3=1) then;do;
                 lmat=j(nrow(coeffplt),2,0);lmat[4,1]=1;lmat[6,2]=1;
				 frat2=(((lmat`)*coeffplt)`*inv(lmat`*covmat*lmat)*(lmat`*coeffplt))/2;
              end;
			  temp2=(r2full-(1-(ssem2/ssty)))||frat2||2||dfden||(1-probf(frat2,2,dfden));
			  temp = temp//temp2;
			  rnms=rnms//yintkey2[3,1]//"Both";
			end;
		    clnm = {"R2-chng" "F" "df1" "df2" "p"};
			print temp [label = "R-square increase due to interaction(s):" rowname=rnms colname=clnm format = &decimals];
		  end;
          if ((model = 3) & (dichy = 0)) then;do;
		    temp = (((op[8,3]#op[8,3])*(1-r2full))/dfden)||(op[8,3]#op[8,3])||dfden||op[8,4];
			if (hc3=1) then;do;
              temp[1,1]=((hcnot[8,1]*hcnot[8,1])*(1-r2full))/dfden;
            end; 
		    rnms=yintkey2[5,1];
		    clnm = {"R2-chng" "F(1,df2)" "df2" "p"};
		    print temp [label = "R-square increase due to three-way interaction:" rowname = rnms colname = clnm format = &decimals];
          end;
		end;
	  end; *[f];
      if ((model = 6) & (totlp = 1)) then;do;
        mmpaths[nrow(mmpaths),1]=coeff[nrow(mmpaths),1];
	    mmpaths[nrow(mmpaths),(2:(nmeds+1))]=coeff[2:(nmeds+1),1]`;
	  end;
	  if (totlp = 1) then;do; *[g];
	    do im = 1 to nmeds; *[h];
		  if (model < 4) then;do;
		    ymat[1,im]=coeff[3,1]*(1-yes);ymat[2,im]=coeff[4,1];cmat[1,im]=covmat[3,3];cmat[2,im]=covmat[4,4];
            cmat[5,im]=covmat[3,4];jnb1=coeff[3,1];jnb3=coeff[4,1];jnsb1=covmat[3,3];jnsb3=covmat[4,4];
		    jnsb1b3=covmat[3,4];
		    if ((model = 2) | (model = 3)) then;do;
			  ymat[3,im]=coeff[6,1];cmat[3,im]=covmat[6,6];cmat[6,im]=covmat[3,6];cmat[8,im]=covmat[4,6];
			end;
			if (model = 3) then;do;
			  ymat[4,im]=coeff[8,1];cmat[4,im]=covmat[8,8];cmat[7,im]=covmat[3,8];cmat[9,im]=covmat[4,8];
			  cmat[10,im]=covmat[6,8];jnb1=coeff[4,1];jnb3=coeff[8,1];jnsb1=covmat[4,4];jnsb3=covmat[8,8];
			  jnsb1b3=covmat[4,8];
			end;
		  end;
          if (model > 3) then;do;
		    ymat[5,im]=coeff[(1+im),1];
		  end;
		  if (xmy = 1) then;do;
		    ymat[6,im]=coeff[(2+nmeds+im),1];
		  end;
		  if (vy = 1) then;do;
		    ymat[6,im]=coeff[(3+nmeds+im),1];
		  end;
		  if ((qy = 1) & (vy = 1)) then;do;
		    ymat[6,im]=coeff[(5+nmeds+((im-1)*2)),1];
			ymat[7,im]=coeff[(6+nmeds+((im-1)*2)),1];
		  end;
          if (vqy = 1) then;do;
		    ymat[6,im]=coeff[(6+nmeds+((im-1)*3)),1];
			ymat[7,im]=coeff[(7+nmeds+((im-1)*3)),1];
			ymat[8,im]=coeff[(8+nmeds+((im-1)*3)),1];
		  end;
		  if (wmy = 1) then;do;
		    ymat[7,im]=coeff[(3+nmeds+im-wy),1];
		  end;
		  if ((wmy = 1) & (vy = 1)) then;do;
            ymat[7,im]=coeff[(4+(nmeds*2)+im-wy),1];
		  end;
          if ((wmy = 1) & (vy = 1) & (wvmy = 1)) then;do;
		    ymat[7,im]=coeff[(6+(nmeds*2)+((im-1)*2)-wy),1];
			ymat[8,im]=coeff[(7+(nmeds*2)+((im-1)*2)-wy),1];
		  end;
          if ((wmy = 1) & (zmy = 1)) then;do;
		    ymat[6,im]=coeff[((6-(wzy*3)+(wzm-1)+(nmeds*2)+((im-1)*2)*wzm)+((im-1)*(1-wzm))-((zy-wzy)*2)),1];
            ymat[7,im]=coeff[(3-zy+im+nmeds),1];
			if (wzmy = 1) then;do;
			  ymat[8,im]=coeff[(7-(wzy*3)+(nmeds*2)+((im-1)*2)),1];
			end;
		  end;
          if ((nmods > 0) & (model ^= 5)) then;do;
		    do indlp = 1 to nrow(modvals);
			  temp1=ymat[1:4,im]#vmat[1:4,indlp];temp1=temp1[+,];
			  indeff[indlp,1]=temp1;
              if (model > 6) then;do;
			    temp2=ymat[5:8,im]#vmat[5:8,indlp];temp2=temp2[+,];
                indeff[indlp,1]=temp1*temp2;
              end;
			end;
			indboot[(bt+(im-1)*(boot+1)),]=indeff`;
			if ((imm=1) | (imm=3)) then;do;
			  indbootp[bt,im]=ymat[2,im]*ymat[5,im];
			  if (imm=3) then;do;
                indbootp[bt,(im+nmeds)]=ymat[3,im]*ymat[5,im];
				if (zdich=1) then;do;
                  indbootp[bt,(im+nmeds)]=indbootp[bt,(im+nmeds)]*(cmaxz-cminz);
				end;
			  end;
			  if (wdich = 1) then;do;
			    indbootp[bt,im]=indbootp[bt,im]*(cmaxw-cminw);
			  end;
			end;
			if (((imm=2) | (imm=4)) | (model = 74)) then;do;
			  indbootp[bt,im]=ymat[1,im]*ymat[6,im];
			  if (imm=4) then;do;
                indbootp[bt,(im+nmeds)]=ymat[1,im]*ymat[7,im];
				if (qdich=1) then;do;
                  indbootp[bt,(im+nmeds)]=indbootp[bt,(im+nmeds)]*(cmaxq-cminq);
				end;
			  end;
			  if (vdich = 1) then;do;
			    indbootp[bt,im]=indbootp[bt,im]*(cmaxv-cminv);
			  end;
			end;
			if (imm=7) then;do;
              indbootp[bt,im]=ymat[2,im]*ymat[6,im];
			  indboop1[bt,(((im-1)*nrow(immmv2))+1):(im*nrow(immmv2))]=(ymat[2,im]*ymat[5,im]*onesmv2)+(ymat[2,im]*ymat[6,im]*(immmv2)`);
			  indboop2[bt,(((im-1)*nrow(immmv1))+1):(im*nrow(immmv1))]=(ymat[1,im]*ymat[6,im]*onesmv1)+(ymat[2,im]*ymat[6,im]*(immmv1)`);
              if (wdich=1) then;do;
			    indbootp[bt,im]=indbootp[bt,im]*(cmaxw-cminw);
				indboop1[bt,(((im-1)*nrow(immmv2))+1):(im*nrow(immmv2))]=indboop1[bt,(((im-1)*nrow(immmv2))+1):(im*nrow(immmv2))]*(cmaxw-cminw);
              end;
              if (vdich=1) then;do;
			  	indbootp[bt,im]=indbootp[bt,im]*(cmaxv-cminv);
			    indboop2[bt,(((im-1)*nrow(immmv1))+1):(im*nrow(immmv1))]=indboop2[bt,(((im-1)*nrow(immmv1))+1):(im*nrow(immmv1))]*(cmaxv-cminv);
              end;
            end;
			if (imm=5) then;do;
              indbootp[bt,im]=ymat[4,im]*ymat[5,im];
			  indboop1[bt,(((im-1)*nrow(immmv2))+1):(im*nrow(immmv2))]=(ymat[2,im]*ymat[5,im]*onesmv2)+(ymat[4,im]*ymat[5,im]*(immmv2)`);
			  indboop2[bt,(((im-1)*nrow(immmv1))+1):(im*nrow(immmv1))]=(ymat[3,im]*ymat[5,im]*onesmv1)+(ymat[4,im]*ymat[5,im]*(immmv1)`);
              if (wdich=1) then;do;
			    indbootp[bt,im]=indbootp[bt,im]*(cmaxw-cminw);
				indboop1[bt,(((im-1)*nrow(immmv2))+1):(im*nrow(immmv2))]=indboop1[bt,(((im-1)*nrow(immmv2))+1):(im*nrow(immmv2))]*(cmaxw-cminw);
              end;
              if (zdich=1) then;do;
			    indbootp[bt,im]=indbootp[bt,im]*(cmaxz-cminz);
			    indboop2[bt,(((im-1)*nrow(immmv1))+1):(im*nrow(immmv1))]=indboop2[bt,(((im-1)*nrow(immmv1))+1):(im*nrow(immmv1))]*(cmaxz-cminz);
              end;
            end;
			if (imm=6) then;do;
              indbootp[bt,im]=ymat[1,im]*ymat[8,im];
			  indboop1[bt,(((im-1)*nrow(immmv2))+1):(im*nrow(immmv2))]=(ymat[1,im]*ymat[6,im]*onesmv2)+(ymat[1,im]*ymat[8,im]*(immmv2)`);
			  indboop2[bt,(((im-1)*nrow(immmv1))+1):(im*nrow(immmv1))]=(ymat[1,im]*ymat[7,im]*onesmv1)+(ymat[1,im]*ymat[8,im]*(immmv1)`);
              if (vdich=1) then;do;
			    indbootp[bt,im]=indbootp[bt,im]*(cmaxv-cminv);
				indboop1[bt,(((im-1)*nrow(immmv2))+1):(im*nrow(immmv2))]=indboop1[bt,(((im-1)*nrow(immmv2))+1):(im*nrow(immmv2))]*(cmaxv-cminv);
              end;
              if (qdich=1) then;do;
			    indbootp[bt,im]=indbootp[bt,im]*(cmaxq-cminq);
				indboop2[bt,(((im-1)*nrow(immmv1))+1):(im*nrow(immmv1))]=indboop2[bt,(((im-1)*nrow(immmv1))+1):(im*nrow(immmv1))]*(cmaxq-cminq);
              end;
            end;
            if (((model = 58) | (model = 59)) & (wvdich=1)) then;do;
              indbootp[bt,im]=(ymat[1,im]*ymat[7,im]*(cmaxw-cminw))+(ymat[2,im]*ymat[5,im]*(cmaxw-cminw));
              indbootp[bt,im]=indbootp[bt,im]+(ymat[2,im]*ymat[7,im]*((cmaxw*cmaxw)-(cminw*cminw)));
            end;
		  end;
          if ((model = 4) | (model = 5)) then;do;
		  	temp1=ymat[1:4,im]#vmat[1:4,1];temp1=temp1[+,];
			temp2=ymat[5:8,im]#vmat[5:8,1];temp2=temp2[+,];
		    indboot[bt,im]=temp1*temp2;     
            if ((effsize=1) & (dichy=0)) then;do;
			  if (ctot = 0) then;do;ctot=.00000000000001;end;
              sumind=indboot[bt,+];
              if (im = nmeds) then;do;pmeff[bt,2:(im+1)]=indboot[bt,]/(sumind+coeff[(2+nmeds),1]);end;
		      rmeff[bt,(im+1)]=indboot[bt,im]/coeff[(2+nmeds),1];
			  abpseff[bt,(im+1)]=indboot[bt,im]/stddevy;
			  abcseff[bt,(im+1)]=abpseff[bt,(im+1)]*stddevx;
              if (ncovs >  0 | clsdmy > 0) then;do;
                abpseff[bt,(im+1)]=indboot[bt,im]/sdycov;
				abcseff[bt,(im+1)]=abpseff[bt,(im+1)]*sdxcov;
			  end;
              if ((nmeds = 1) & (ncovs = 0) & (cluster = 0) & (model = 4)) then;do;
                r245[bt,1]=r2my-(r2full-r2xy);
			    abmmr=1;
			    if (indboot[bt,im] < 0) then;do;
			      abmmr=min(abmm);
			    end;
			    if (indboot[bt,im] > 0) then;do;
			      abmmr=max(abmm);
			    end;
			    kappa2[bt,1]=indboot[bt,im]/abmmr;
			    tmp=indboot[bt,im]/abmmr;
			  end;
		    end;
		  end;
          if (model = 6) then;do;
		    if (nmeds = 2) then;do;
			  indboot[bt,1]=mmpaths[2,1]*mmpaths[4,2];
			  indboot[bt,2]=mmpaths[2,1]*mmpaths[3,2]*mmpaths[4,3];
			  indboot[bt,3]=mmpaths[3,1]*mmpaths[4,3];
			end;
			if (nmeds = 3) then;do;
			  indboot[bt,1]=mmpaths[2,1]*mmpaths[5,2];
			  indboot[bt,2]=mmpaths[2,1]*mmpaths[3,2]*mmpaths[5,3];
			  indboot[bt,3]=mmpaths[2,1]*mmpaths[4,2]*mmpaths[5,4];
			  indboot[bt,4]=mmpaths[2,1]*mmpaths[3,2]*mmpaths[4,3]*mmpaths[5,4];
			  indboot[bt,5]=mmpaths[3,1]*mmpaths[5,3];
			  indboot[bt,6]=mmpaths[3,1]*mmpaths[4,3]*mmpaths[5,4];
			  indboot[bt,7]=mmpaths[4,1]*mmpaths[5,4];
			end;
			if (nmeds = 4) then;do;
			  indboot[bt,1]=mmpaths[2,1]*mmpaths[6,2];
			  indboot[bt,2]=mmpaths[2,1]*mmpaths[3,2]*mmpaths[6,3];
			  indboot[bt,3]=mmpaths[2,1]*mmpaths[4,2]*mmpaths[6,4];
			  indboot[bt,4]=mmpaths[2,1]*mmpaths[5,2]*mmpaths[6,5];
			  indboot[bt,5]=mmpaths[2,1]*mmpaths[3,2]*mmpaths[4,3]*mmpaths[6,4];
			  indboot[bt,6]=mmpaths[2,1]*mmpaths[3,2]*mmpaths[5,3]*mmpaths[6,5];
			  indboot[bt,7]=mmpaths[2,1]*mmpaths[4,2]*mmpaths[5,4]*mmpaths[6,5];
			  indboot[bt,8]=mmpaths[2,1]*mmpaths[3,2]*mmpaths[4,3]*mmpaths[5,4]*mmpaths[6,5];
			  indboot[bt,9]=mmpaths[3,1]*mmpaths[6,3];
			  indboot[bt,10]=mmpaths[3,1]*mmpaths[4,3]*mmpaths[6,4];
			  indboot[bt,11]=mmpaths[3,1]*mmpaths[5,3]*mmpaths[6,5];
			  indboot[bt,12]=mmpaths[3,1]*mmpaths[4,3]*mmpaths[5,4]*mmpaths[6,5];
			  indboot[bt,13]=mmpaths[4,1]*mmpaths[6,4];
			  indboot[bt,14]=mmpaths[4,1]*mmpaths[5,4]*mmpaths[6,5];
			  indboot[bt,15]=mmpaths[5,1]*mmpaths[6,5];
            end;
            if ((effsize=1) & (dichy=0)) then;do;
			  if (ctot = 0) then;do;ctot=.00000000000001;end;
			  pmeff[bt,]=indboot[bt,]/(indboot[bt,+]+mmpaths[nrow(mmpaths),1]);
			  rmeff[bt,]=indboot[bt,]/mmpaths[nrow(mmpaths),1];
			  abpseff[bt,]=indboot[bt,]/stddevy;
			  abcseff[bt,]=(stddevx*indboot[bt,])/stddevy;
              if (ncovs > 0 | clsdmy > 0) then;do;
                abpseff[bt,]=indboot[bt,]/sdycov;
				abcseff[bt,]=(sdxcov*indboot[bt,]/sdycov);
			  end;
			  if ((nmeds = 1) & (ncovs = 0) & (cluster = 0) & (model = 4)) then;do;
                r245[bt,]=r2my-(r2full-r2xy);
			  end;
			end;
		  end;
		end; *[h];
	  end; *[g];
	end; *[d];	
	if ((savboot = 1) & (bt > 1)) then;do;bootstrp[(bt-1),]=bootcoef;
	end;
  end; *[b];
  if (savboot=1) then;do;bootstrp=bootstrp[,2:ncol(bootstrp)];
    create &save from bootstrp;
    append from bootstrp;
  end;

  if (mc > 0) then;do;
    x1=sqrt(-2*log(ranuni(j(mc,nrow(mcmats),&seed))))#cos((2*3.14159265358979)*(ranuni(j(mc,nrow(mcmats),&seed))));
	x1=x1*root(mcmats);
	do i = 1 to nrow(x1);
	  x1[i,]=x1[i,]+mccoeff`;
	end;
	do i = 1 to nmeds;
	  indboot[2:nrow(indboot),i]=x1[,i]#x1[,(i+nmeds)];
	end;
  end;


  if ((ttt = 0) & (model > 3)) then;do;
    if (toteff = 0) then;do;
	  print "****************************** DIRECT AND INDIRECT EFFECTS *******************************";
    end;
	if (toteff ^= 0) then;do;
	  print "*************************** TOTAL, DIRECT AND INDIRECT EFFECTS ***************************";
	end;
    if (model ^= 74) then;do;
      if (dichy = 0) then;do;
	    clnm = {"Effect" "SE" "t" "p" "LLCI" "ULCI"};
	    if (toteff = 1) then;do;
          print decotot [label = "Total effect of X on Y" colname = clnm format = &decimals];
        end;
        print deco [label = "Direct effect of X on Y" colname = clnm format = &decimals];
      end;
      if (dichy = 1) then;do;
        clnm = {"Effect" "SE" "Z" "p" "LLCI" "ULCI"};
	    if (toteff = 1) then;do;
	      print decotot [label = "Total effect of X on Y" colname = clnm format = &decimals];
        end;
        print deco [label = "Direct effect of X on Y" colname = clnm format = &decimals];
      end;
    end;
  end;
  if (ttt > 0) then;do;
    print "****************************** DIRECT AND INDIRECT EFFECTS *******************************";
    clbs=modvnm2||"Effect"||"SE"||"t"||"p"||"LLCI"||"ULCI";
	tratio=directv/sedir;
	p=2*(1-probt(abs(tratio),(n-ncol(xy))));
	outp=modvalsd||directv||sedir||tratio||p;
	if (dichy = 0) then;do;
	  temp1=directv-sqrt(jncrit)*sedir;
	  temp2=directv+sqrt(jncrit)*sedir;
	  outp=outp||temp1||temp2;
	end;
	if (dichy = 1) then;do;
	  p=2*(1-probnorm(abs(tratio)));
	  temp=directv-abs(xp2)*sedir;
	  outp=outp||temp;
	  temp=directv+abs(xp2)*sedir;
	  outp=outp||temp;
	  clbs=modvnm2||"Effect"||"SE"||"Z"||"p"||"LLCI"||"ULCI";
	end;
	if (coeffci=0) then;do;
	  outp=outp[,1:(ncol(outp)-2)];
	end;
	print outp [label = "Conditional direct effect(s) of X on Y at values of the moderator(s)" 
              format = &decimals colname = clbs rowname = " "];
  end;
  if ((nmods > 0) & (model ^= 5)) then;do; *[xx];
    if (model < 4) then;do;
	  print "*****************************************************************************************";  
      zmat[1,1]=1*(1-yes);
	  cfse=j(nrow(modvals),1,0);
	  do mmm = 1 to nrow(modvals);
	    if (model = 1) then;do;
		  zmat[2,1]=modvals[mmm,1]##2;
		  zmat[5,1]=2*modvals[mmm,1];
		end;
        if ((model = 2) | (model = 3)) then;do;
		  zmat[2,1]=modvals[mmm,2]##2;
		  zmat[3,1]=modvals[mmm,1]##2;
		  zmat[4,1]=(modvals[mmm,1]##2)*(modvals[mmm,2]##2)*(1-yes2);
		  zmat[5,1]=2*modvals[mmm,2]*(1-yes);
		  zmat[6,1]=2*modvals[mmm,1]*(1-yes);
		  zmat[7,1]=2*modvals[mmm,1]*modvals[mmm,2]*(1-yes);
		  zmat[8,1]=2*modvals[mmm,1]*modvals[mmm,2];
		  zmat[9,1]=2*modvals[mmm,1]*(modvals[mmm,2]##2)*(1-yes2);
		  zmat[10,1]=2*(modvals[mmm,1]##2)*modvals[mmm,2]*(1-yes2);
		end;
		temp=zmat#cmat;cfse[mmm,1]=sqrt(temp[+,]);
	  end;
    end;
    if (nmods > 0) then;do; *[bbb];
	  clbs=modvnm||"Effect";
	  do im = 1 to nmeds;
	    obs=indboot[(1+(im-1)*(boot+1)),]`;
		outp=modvals||obs;
		if (model < 4) then;do;
		  tstat=obs/cfse;
		  if (dichy=0) then;do;
		    pval=2*(1-probt(abs(tstat),(n-ncol(xy))));
			temp=obs-sqrt(jncrit)*cfse;
			outp=outp||cfse||tstat||pval||temp;
			temp=obs+sqrt(jncrit)*cfse;
			outp=outp||temp;
			clbs = clbs||"se"||"t"||"p"||"LLCI"||"ULCI";
			jnclbs=clbs;
		  end;
		  if (dichy=1) then;do;
		    pval=2*(1-probnorm(abs(tstat)));
			temp=obs-abs(xp2)*cfse;
			outp=outp||cfse||tstat||pval||temp;
			temp=obs+abs(xp2)*cfse;
			outp=outp||temp;
			clbs=clbs||"se"||"Z"||"p"||"LLCI"||"ULCI";
			jnclbs=clbs;
		  end;
		end;
        if (boot > 0) then;do;
		  ones=j(boot,1,1);
		  estmte=indboot[(1+(im-1)*(boot+1)),];
          indboot2=indboot[(2+(im-1)*(boot+1)):(1+(im-1)*(boot+1)+boot),];
		  mnind=indboot2[+,]/boot;mnind=mnind`;
		  tmp=indboot2##2;tmp=tmp[+,];
          stdind=(sqrt((tmp-((indboot2[+,]##2)/boot))/(boot-1)))`;
          llci=j(1,ncol(indboot2),-999);
		  ulci=j(1,ncol(indboot2),-999);
          do eee = 1 to ncol(indboot2);
		    inpt=indboot2[,eee];inpt2=(estmte[1,eee]*bconoff)+(9999*(1-bconoff));
		    %bcboot (databcbt=inpt,estmte=inpt2);
			llci[1,eee]=llcit;
			ulci[1,eee]=ulcit;
			if ((badlo=1) & (llcit ^= priorlo)) then;do;
			  badend=badend||llcit;
			  priorlo=llcit;
			end;
			if ((badhi=1) & (ulcit ^= priorhi)) then;do;
			  badend=badend||ulcit;
			  priorhi=ulcit;
			end;
		  end;
		  outp=modvals||obs||stdind||llci`||ulci`;
		  clbs=modvnm||"Effect"||"Boot SE"||"BootLLCI"||"BootULCI";
		end;
        mtemp=mnames[1,im];
		rlbs=j(nrow(modvals),1,mnames[1,im]);
        if (model < 4) then;do;
		  if (coeffci = 0) then;do;
		    outp=outp[,1:(ncol(outp)-2)];
		  end;
		  if (yes=0) then;do;
          print outp [label = "Conditional effect of X on Y at values of the moderator(s)" colname = clbs
		  format=&decimals rowname = " "];
		  end;
		  if (yes=1) then;do;
            outp=outp[,3:ncol(outp)];
			clbs=clbs[,3:ncol(clbs)];
			clbs[1,1]={"Contrast"};
			print outp [label = "Contrast of conditional effects of X on Y" colname = clbs format=&decimals rowname = " "];
		  end;
		end;
		if ((model > 5) & (mod74dic ^= 1)) then;do;
		  if (im = 1) then;do;
		    print "Conditional indirect effect(s) of X on Y at values of the moderator(s)";
		  end;
		  print outp [label = " " rowname = rlbs colname = clbs format = &decimals];
		end;
		if ((model = 74) & (mod74dic = 1)) then;do;
		  if (im = 1) then;do;
		    print "Indirect effect(s) of X on Y:";
		    clbs3=clbs[1,2:ncol(clbs)];
		  end;
		  outp3=outp[1,2:ncol(outp)];
		  print outp3 [label = " " rowname = rlbs colname=clbs3 format = &decimals];
		end;
	  end;
      do i = notes to 1 by -1;
	    if ((note[i,1]=4) & (yes=0)) then;do;
		  print "Values for quantitative moderators are the 10th, 25th, 50th, 75th, and 90th percentiles.";
		  print "Values for dichotomous moderators are the two values of the moderator.";
		end;
		if ((note[i,1]=5) & (yes=0)) then;do;
		  print "Values for quantitative moderators are the mean and plus/minus one SD from mean.";
		  print "Values for dichotomous moderators are the two values of the moderator.";
		end;
		if ((note[i,1]=14) & (yes=0)) then;do;
          print "NOTE: For at least one moderator in the conditional effect table above, one SD";
		  print "      below the mean was replaced with the minimum because one SD below the mean";
		  print "      is outside of the range of the data.";
        end;
	    if (note[i,1]=15) then;do;
          print "NOTE: For at least one moderator in the conditional effect table above, one SD";
		  print "      below the mean was replaced with the maximum because one SD above the mean";
		  print "      is outside of the range of the data.";
        end;
	  end;
	  if ((model = 3) & (yes=0)) then;do;
	    jnvals=j(nrow(matw),7,0);
		jnvals[,1]=matw;
		jnvals[,2]=jnb1+jnb3*jnvals[,1];
		jnvals[,3]=sqrt(jnsb1+2*jnvals[,1]*jnsb1b3+(jnvals[,1]##2)*jnsb3);
		jnvals[,4]=jnvals[,2]/jnvals[,3];
		if (dichy=0) then;do;
		  jnvals[,5]=2*(1-probt(abs(jnvals[,4]),jndf));
		end;
		if (dichy=1) then;do;
		  jnvals[,5]=2*(1-probnorm(abs(jnvals[,4])));
		end;
		jnvals[,6]=jnvals[,2]-sqrt(jncrit)#jnvals[,3];
		jnvals[,7]=jnvals[,2]+sqrt(jncrit)#jnvals[,3];
		clbs=clbs[,1]||clbs[,3:ncol(clbs)];
		if (coeffci = 0) then;do;
		  jnvals=jnvals[,1:(ncol(jnvals)-2)];
		end;
		print jnvals [label = "Conditional effect of X*M interaction at values of W" colname = clbs rowname = " " format = &decimals];
	  end;
      if ((jn = 1) & ((model = 1) | (model = 3)) & (jndich=0) & (yes=0)) then;do;
	    ajn=(jncrit*jnsb3)-(jnb3*jnb3);bjn=2*((jncrit*jnsb1b3)-(jnb1*jnb3));
		cjn=(jncrit*jnsb1)-(jnb1*jnb1);radarg=(bjn*bjn)-(4*ajn*cjn);
		den=2*ajn;nrts=0;
		print "******************************** JOHNSON-NEYMAN TECHNIQUE ********************************";
        if ((radarg >= 0) & (den ^= 0)) then;do;
		  x21=(-bjn+sqrt(radarg))/den;
		  x22=(-bjn-sqrt(radarg))/den;
		  roots = 0;
		  if ((x21 >= jnmin) & (x21 <= jnmax)) then;do;
		    nrts=1;roots=roots//x21;
		  end;
		  if ((x22 >= jnmin) & (x22 <= jnmax)) then;do;
		    nrts=nrts+1;roots=roots//x22;
		  end;
		  roots=roots||j(nrow(roots),2,0);
          modtemp=m;
		  if (model=3) then;do;modtemp=w;end;
          if (nrts > 0) then;do;
		    roots = roots[2:nrow(roots),1:3];
			rootsum=(modtemp < roots[1,1]);roots[1,2]=(rootsum[+]/n)*100;
            rootsum=(modtemp > roots[1,1]);roots[1,3]=(rootsum[+]/n)*100;
            if (nrow(roots)=2) then;do;
              rootsum=(modtemp < roots[2,1]);roots[2,2]=(rootsum[+]/n)*100;
              rootsum=(modtemp > roots[2,1]);roots[2,3]=(rootsum[+]/n)*100;
            end;
			lohilbs="Value"||"% below"||"% above";
			print roots [label = "Moderator values(s) defining Johnson-Neyman significance region(s)" colname=lohilbs format = &decimals];
			jnvals=j((21+nrts),7,0);
			do i = 0 to 20;
			  jnvals[(i+1),1]=jnmin+(i*((jnmax-jnmin)/20));
			end;
			do i = 1 to nrts;
			  do j = 2 to nrow(jnvals);
                if ((roots[i,1] > jnvals[(j-1),1]) & (roots[i,1] < jnvals[j,1])) then;do;
				  jnvals[(j+1):(21+i),1]=jnvals[j:(20+i),1];
				  jnvals[j,1]=roots[i,1];
				end;
			  end;
			end;
		    do i = 1 to nrow(jnvals);
			  jnvals[i,2]=jnb1+jnb3*jnvals[i,1];
			  jnvals[i,3]=sqrt(jnsb1+2*jnvals[i,1]*jnsb1b3+(jnvals[i,1]##2)*jnsb3);
			  jnvals[i,4]=jnvals[i,2]/jnvals[i,3];
			  if (dichy = 0) then;do;
			    jnvals[i,5]=2*(1-probt(abs(jnvals[i,4]),jndf));
			  end;
			  if (dichy = 1) then;do;
			    jnvals[i,5]=2*(1-probnorm(abs(jnvals[i,4])));
			  end;
			  jnvals[i,6]=jnvals[i,2]-sqrt(jncrit)*jnvals[i,3];
			  jnvals[i,7]=jnvals[i,2]+sqrt(jncrit)*jnvals[i,3];
			end;
			if (model = 1) then;do;
			  print jnvals [label = "Conditional effect of X on Y at values of the moderator (M)" 
              colname=jnclbs rowname = " " format = &decimals];
            end;
			if (model = 3) then;do;
			  jnclbs=jnclbs[,1]||jnclbs[,3:ncol(jnclbs)];
			  print jnvals [label = "Conditional effect of X*M on Y at values of the moderator (W)" 
              colname=jnclbs rowname = " " format=&decimals];
			end;
		  end;
        end;
        if (nrts = 0) then;do;
		  print "There are no statistical significance transition points within the observed range of the moderator";
        end;
	  end;
    end; *[bbb];
    if ((model < 4) & (plot = 1)) then;do;
      dataplot=j((nrow(modvals)*nrow(matx)),(ncol(modvals)+1),0);
	  tmp=1;
	  do i = 1 to nrow(modvals);
	    do j = 1 to nrow(matx);
		  dataplot[tmp,]=matx[j,1]||modvals[i,];
		  tmp=tmp+1;
	    end;
	  end;
	  dataplot=dataplot||j(nrow(dataplot),(1+dichy),0);
	  dataplo2=j(nrow(dataplot),1,1);
	  if (model = 1) then;do;
	    dataplo2=dataplo2||dataplot[,2]||dataplot[,1]||(dataplot[,1]#dataplot[,2]);
	  end;
	  if ((model = 2) | (model = 3)) then;do;
	    dataplo2=dataplo2||dataplot[,3]||dataplot[,1]||(dataplot[,1]#dataplot[,3])||dataplot[,2]||(dataplot[,1]#dataplot[,2]);
        if (model = 3) then;do;
          dataplo2=dataplo2||(dataplot[,2]#dataplot[,3])||(dataplot[,1]#dataplot[,2]#dataplot[,3]);
		end;
      end;
      do i = 1 to nrow(dataplot);
	    tmp=dataplo2[i,];
		if (ncovs > 0) then;do;
		  tmp=tmp||covmeans;
		end;
		if (cluster > 0) then;do;
		  tmp=tmp||cldmeans;
		end;
		dataplot[i,(ncol(dataplot)-(dichy))]=tmp*coeffplt;
		if (dichy=1) then;do;
		  dataplot[i,(ncol(dataplot))]=exp(tmp*coeffplt)/(1+exp(tmp*coeffplt));
		end;
	  end;
      clbs=xname||modvnm||yname;
	  if (dichy = 1) then;do;
	    clbs=xname||modvnm||"ln(odds)"||"prob";
	  end;
	  print "*****************************************************************************************"; 
	  print dataplot [label = "Data for visualizing conditional effect of X on Y" colname = clbs rowname = " " format = &decimals];
      if (ncovs > 0) then;do;
	    print "Estimates in this table are based on setting covariates to their sample means";
	  end;
	end;
  end; *[xx];
  if ((imm > 0) | ((model = 74) & (mod74dic=0)) | (((model = 58) | (model = 59)) & (wvdich = 1))) then;do;
    if ((imm > 4) & (imm < 8)) then;do;
	  indbootp=indbootp[,1:nmeds]||indboop1||indboop2;
	end;
	obsprod=indbootp[1,]`;
	if (boot > 0) then;do;
	  ones=j(boot,1,1);
	  estmte=indbootp[1,];
	  indbootp=indbootp[2:(boot+1),];
	  mnindp=indbootp[+,]/boot;mnindp=mnindp`;
	  tmp=indbootp##2;tmp=tmp[+,];
      stdindp=(sqrt((tmp-((indbootp[+,]##2)/boot))/(boot-1)))`;
      llcip=j(1,ncol(indbootp),-999);
      ulcip=j(1,ncol(indbootp),-999);
      do eee = 1 to ncol(indbootp);
		inpt=indbootp[,eee];inpt2=(estmte[1,eee]*bconoff)+(9999*(1-bconoff));
		%bcboot (databcbt=inpt,estmte=inpt2);
		llcip[1,eee]=llcit;
		ulcip[1,eee]=ulcit;
		if ((badlo=1) & (llcit ^= priorlo)) then;do;
		  badend=badend||llcit;
		  priorlo=llcit;
		end;
		if ((badhi=1) & (ulcit ^= priorhi)) then;do;
		  badend=badend||ulcit;
		  priorhi=ulcit;
		end;
	  end;
	  outp=obsprod||stdindp||llcip`||ulcip`;
	  clbs="Effect"||"Boot SE"||"BootLLCI"||"BootULCI";
	  if ((model=8) | (model=12)) then;do;
	    outpimm=outp[1:nmeds,];
	    print outpimm [label = "Indirect effect of highest order product" colname = clbs rowname = mnames format = &decimals];
	  end;
	  if (((imm=1) | (imm=2)) | (((model=58) | (model = 59)) & (wvdich=1)) | ((model=74) & (mod74dic=0))) then;do;
	    print "****************************** INDEX OF MODERATED MEDIATION ********************************";
      end;
      if ((imm=3) | (imm=4)) then;do;
	    print "************************** INDEX OF PARTIAL MODERATED MEDIATION ****************************";
	  end;
      clbs3="Index"||"Boot SE"||"BootLLCI"||"BootULCI";
	  if (imm < 5) then;do;
	    do k4 = 1 to nmods;
		  if (nmods > 1) then;do;
            tmplb=modvnm[1,k4];
		    print tmplb [label = "Moderator:"];
		  end;
		  outpimm=outp[(((k4-1)*nmeds)+1):(nmeds*k4),];
          print outpimm [label = " " colname = clbs rowname= mnames format = &decimals];
	    end;
	    if ((wvdich=1) | (zqdich=1)) then;do;
          print "When the moderator is dichotomous, this is a test of equality of the conditional indirect effects in the two groups";
        end;
      end;
      if ((imm > 4) & (imm < 8)) then;do;
        print "********************** MODERATED AND CONDITIONAL MODERATED MEDIATION ************************";
        outpimm=outp[1:nmeds,];
		print "INDEX OF MODERATED MODERATED MEDIATION:";
        print outpimm [label = " " colname=clbs rowname=mnames format=&decimals];
        outpimm=outp[(nmeds+1):nrow(outp),];
        outpimm=cmmval||outpimm;
		print "INDEX OF CONDITIONAL MODERATED MEDIATION:";
	    do k4=1 to 2;
		  if (k4 = 1) then;do;
            outpimm1=outpimm[1:(nmeds*nrow(immmv2)),];
		    clbs3=modvnm[1,2]||clbs3;
		    cmmlbs=cmmlbs1[2:nrow(cmmlbs1),1];
		  end;
		  if (k4 = 2) then;do;
		    outpimm1=outpimm[((nmeds*nrow(immmv2))+1):nrow(outpimm),];
		    clbs3[1,1]=modvnm[1,1];
		    cmmlbs=cmmlbs2[2:nrow(cmmlbs2),1];
		  end;
          tmplb=modvnm[1,k4];
		  print tmplb [label = "Moderator:"];
		  print outpimm1 [label = " " colname=clbs3 rowname=cmmlbs format=&decimals];
		end;
		if ((wvdich=1) | (zqdich=1)) then;do;
          print "When the moderator is dichotomous, this is a test of equality of the conditional indirect effects in the two groups";
        end;
	  end;       
    end;	
    if (boot = 0) then;do;
	  if ((model = 8) | (model = 12)) then;do;
	    obsimm=obsprod[1:nmeds,];
	    clnm43="Effect";
	    print obsimm [label = "Indirect effect of highest order interaction" colname = clnm43 rowname = mnames format = &decimals];
	  end;
      if (((imm=1) | (imm=2)) | (((model=58) | (model = 59)) & (wvdich=1)) | ((model=74) & (mod74dic=0))) then;do;
	    print "****************************** INDEX OF MODERATED MEDIATION ********************************";
      end;
      if ((imm=3) | (imm=4)) then;do;
	    print "************************** INDEX OF PARTIAL MODERATED MEDIATION ****************************";
	  end;
      if (((imm > 0) & (imm < 5)) | (((model=58) | (model = 59)) & (wvdich=1)) | ((model=74) & (mod74dic=0))) then;do;
	    do k4 = 1 to nmods;
		  if (nmods > 1) then;do;
            tmplb=modvnm[1,k4];
		    print tmplb [label = "Moderator:"];
		  end;
		  outpimm=obsprod[(((k4-1)*nmeds)+1):(nmeds*k4),];
          print outpimm [label = " " colname = "Index" rowname= mnames format = &decimals];
	    end;
      end;
      if ((imm > 4) & (imm < 8)) then;do;
        print "********************** MODERATED AND CONDITIONAL MODERATED MEDIATION ************************";
        outpimm=obsprod[1:nmeds,1];
		print "INDEX OF MODERATED MODERATED MEDIATION:";
        print outpimm [label = " " colname=clbs rowname=mnames format=&decimals];
        outpimm=obsprod[(nmeds+1):nrow(obsprod),];
        outpimm=cmmval||outpimm;
		print "INDEX OF CONDITIONAL MODERATED MEDIATION:";
	    do k4=1 to 2;
		  if (k4 = 1) then;do;
            outpimm1=outpimm[1:(nmeds*nrow(immmv2)),];
		    clbs3=modvnm[1,2]||"Index";
		    cmmlbs=cmmlbs1[2:nrow(cmmlbs1),1];
		  end;
		  if (k4 = 2) then;do;
		    outpimm1=outpimm[((nmeds*nrow(immmv2))+1):nrow(outpimm),];
		    clbs3=modvnm[1,1]||"Index";
		    cmmlbs=cmmlbs2[2:nrow(cmmlbs2),1];
		  end;
          tmplb=modvnm[1,k4];
		  print tmplb [label = "Moderator:"];
		  print outpimm1 [label = " " colname=clbs3 rowname=cmmlbs format=&decimals];
		end;
	  end;	
    end;
  end;
  conmake=0;concols=0;
  if (((model > 3) & (model < 7)) & (nmods = 0) & (nmeds > 1)) then;do;
    if (ncontr=1) then;do;
	  if (contrast > 0) then;do;
        concols=(ncol(indboot)*(ncol(indboot)-1))/2;
	    indcon=j(nrow(indboot),concols,-999);
	    conkey=" "||" "||" ";
        temp=1;
	    conmake=1;
        do i = 1 to (ncol(indboot)-1);
	      do j = (i+1) to (ncol(indboot));
	        indcon[,temp]=indboot[,i]-indboot[,j];
		    if (contrast = 2) then;do;
              indcon[,temp]=abs(indboot[,i])-abs(indboot[,j]);
		    end;
		    if (model ^= 6) then;do;
		      conkeyt=mnames[1,i]||"minus"||mnames[1,j];conkey=conkey//conkeyt;
		    end;
		    if (model = 6) then;do;
		      conkeyt=indlbl2[i,1]||"minus"||indlbl2[j,1];conkey=conkey//conkeyt;
		    end;
		    temp=temp+1;
	      end;
	    end;
	  end;
    end;
    if (ncontr > 1) then;do;
	  indcon=indboot*contrast`;
	  conmake=1;
	end;
  end;
  if ((model = 4 ) | (model = 5)) then;do;  *[ddd];
    clbs="Effect";rlbs="TOTAL"//mnames`;
	obs=indboot[1,]`;obs=obs[+,]//obs;
	if (conmake=1) then;do;
	  obs=obs//indcon[1,]`;
	  rlbs=rlbs//cntname[1:ncol(indcon),1];
	end;
	outp=obs;
	outp2=outp;
	if ((effsize=1) & (dichy=0)) then;do;
      tmp=pmeff[,2:ncol(pmeff)];pmeff[,1]=tmp[,+];
	  tmp=rmeff[,2:ncol(rmeff)];rmeff[,1]=tmp[,+];
      tmp=abpseff[,2:ncol(abpseff)];abpseff[,1]=tmp[,+];
      tmp=abcseff[,2:ncol(abcseff)];abcseff[,1]=tmp[,+];
	  eff=pmeff||rmeff||abpseff||abcseff;
	  if ((nmeds=1) & (ncovs = 0) & (cluster = 0) & (model = 4)) then;do;
	    eff=eff||r245;
		r245obs=r245[1,1]//r245[1,1];
		kappa2ob=kappa2[1,1];
	  end;
	  pmobs=pmeff[1,1:(nmeds+1)]`;
      rmobs=rmeff[1,1:(nmeds+1)]`;
      psobs=abpseff[1,1:(nmeds+1)]`;
      csobs=abcseff[1,1:(nmeds+1)]`;
	  if (ncontr=1) then;do;
	    if (contrast = 0) then;do;
	      outp2=obs||psobs||csobs||pmobs||rmobs;
	    end;
        if (contrast > 0) then;do;
	      obs2=obs[1:nrow(psobs),];
		  outp2=obs2||psobs||csobs||pmobs||rmobs;
	    end;
	  end;
	  clbs="ab"||"ab_ps"||"ab_cs"||"ab/c"||"ab/c'";
	  if ((nmeds = 1) & (ncovs = 0) & (cluster = 0) & (model = 4)) then;do;
	    outp2=outp2||r245obs;
		clbs=clbs||"R-sq_med";
		if ((mc = 0) & (boot = 0)) then;do;note[notes,1]=32;notes=notes+1;end;
	  end;
	end;
    if ((boot = 0) & (mc = 0)) then;do;
	  if (nmeds = 1) then;do;
	    outp2=outp2[2,];
		rlbs=rlbs[2,1];
	  end;
	  if (model=5) then;do;
	    outp2=outp2[,1:3];
	  end;
	  print outp2 [label = "Indirect effect(s) of X on Y" rowname = rlbs colname = clbs format = &decimals];
      if ((contrast > 0) & (effsize=1) & (nmeds > 1)) then;do;
        outp2=indcon[1,]`;
	    rlbs2=cntname[1:ncol(indcon),1];
	    print outp2 [label = "Contrast(s) between indirect effects" rowname = rlbs2 colname = clbs format = &decimals];
      end;
    end;
    if ((boot > 0) | (mc > 0)) then;do;
      temp=indboot[,+];indboot=temp||indboot;
	  bootsz=boot;
	  if (mc > 0) then;do;bootsz=mc;end;
	  ones=j(bootsz,1,1);
	  if (conmake=1) then;do;
	    indboot=indboot||indcon;
	  end;
	  estmte=indboot[1,];
	  indboot=indboot[2:(bootsz+1),];
	  mnind=(indboot[+,]/bootsz)`;
	  tmp=indboot##2;tmp=tmp[+,];
      stdind=(sqrt((tmp-((indboot[+,]##2)/bootsz))/(bootsz-1)))`;
      llci=j(1,ncol(indboot),-999);
	  ulci=j(1,ncol(indboot),-999);
      do eee = 1 to ncol(indboot);
		inpt=indboot[,eee];inpt2=(estmte[1,eee]*bconoff)+(9999*(1-bconoff));
		%bcboot (databcbt=inpt,estmte=inpt2);
		llci[1,eee]=llcit;
		ulci[1,eee]=ulcit;
		if ((badlo=1) & (llcit ^= priorlo)) then;do;
		  badend=badend||llcit;
		  priorlo=llcit;
		end;
		if ((badhi=1) & (ulcit ^= priorhi)) then;do;
		  badend=badend||ulcit;
		  priorhi=ulcit;
		end;
	  end;
	  if ((effsize=1) & (dichy=0)) then;do;
	    estmte=eff[1,];
		eff=eff[2:nrow(eff),];
		tmp=eff##2;tmp=tmp[+,];
        stdindf=(sqrt((tmp-((eff[+,]##2)/boot))/(boot-1)))`;
        llcif=j(1,ncol(eff),-999);
	    ulcif=j(1,ncol(eff),-999);
        do eee = 1 to ncol(eff);
		  inpt=eff[,eee];inpt2=(estmte[1,eee]*bconoff)+(9999*(1-bconoff));
		  %bcboot (databcbt=inpt,estmte=inpt2);
		  llcif[1,eee]=llcit;
		  ulcif[1,eee]=ulcit;
		  if ((badlo=1) & (llcit ^= priorlo)) then;do;
		    badend=badend||llcit;
		    priorlo=llcit;
		  end;
		  if ((badhi=1) & (ulcit ^= priorhi)) then;do;
		    badend=badend||ulcit;
		    priorhi=ulcit;
		  end;
	    end;
      end;
	end;
    if ((boot > 0) | (mc > 0)) then;do;
	  outp=obs||stdind||llci`||ulci`;
	  if (nmeds = 1) then;do;
	    outp=outp[2,];rlbs=rlbs[2,1];
	  end;
	  clbs="Effect"||"Boot SE"||"BootLLCI"||"BootULCI";
	  if (mc > 0) then;do;
	  clbs="Effect"||"MC SE"||"MC LLCI"||"MC ULCI";
	  end;
	  print outp [label = "Indirect effect of X on Y" rowname = rlbs colname = clbs format = &decimals];
      if ((dichy=0) & (effsize = 1)) then;do;
	    outp=psobs||stdindf[(2*(nmeds+1)+1):(3*(nmeds+1)),1]||(llcif[1,(2*(nmeds+1)+1):(3*(nmeds+1))])`||(ulcif[1,(2*(nmeds+1)+1):(3*(nmeds+1))])`;
        if (nmeds = 1) then;do;
		  outp=outp[2,];
		end;
 	    print outp [label = "Partially standardized indirect effect of X on Y" rowname = rlbs colname = clbs format = &decimals];
        outp=csobs||stdindf[(3*(nmeds+1)+1):(4*(nmeds+1)),1]||(llcif[1,(3*(nmeds+1)+1):(4*(nmeds+1))])`||(ulcif[1,(3*(nmeds+1)+1):(4*(nmeds+1))])`;
        if (nmeds = 1) then;do;
		  outp=outp[2,];
		end;    
 	    print outp [label = "Completely standardized indirect effect of X on Y" rowname = rlbs colname = clbs format = &decimals];
        outp=pmobs||stdindf[1:(nmeds+1),1]||(llcif[1,1:(nmeds+1)])`||(ulcif[1,1:(nmeds+1)])`;
		if (model = 4) then;do;
	      if (nmeds = 1) then;do;
		    outp=outp[2,];
		  end;    
 	      print outp [label = "Ratio of indirect to total effect of X on Y" rowname = rlbs colname = clbs format = &decimals];
          outp=rmobs||stdindf[((nmeds+1)+1):(2*(nmeds+1)),1]||(llcif[1,((nmeds+1)+1):(2*(nmeds+1))])`||(ulcif[1,((nmeds+1)+1):(2*(nmeds+1))])`;
	      if (nmeds = 1) then;do;
		    outp=outp[2,];
		  end;    
 	      print outp [label = "Ratio of indirect to direct effect of X on Y" rowname = rlbs colname = clbs format = &decimals];
          if ((nmeds = 1) & (cluster = 0) & (ncovs = 0) & (model = 4)) then;do;
		    r245obs=r245obs[1,1];
		    outp=r245obs||stdindf[(4*(nmeds+1)+1):(4*(nmeds+1)+1),1]||(llcif[1,(4*(nmeds+1)+1):(4*(nmeds+1)+1)])`||(ulcif[1,(4*(nmeds+1)+1):(4*(nmeds+1)+1)])`;
		    print outp [label = "R-squared mediation effect size" rowname = rlbs colname = clbs format = &decimals];
            * outp=kappa2ob||stdindf[nrow(stdindf),1]||llcif[1,ncol(llcif)]||ulcif[1,ncol(ulcif)];
		    * print outp [label = "Preacher and Kelley (2011) Kappa-squared" rowname = rlbs colname = clbs format = &decimals];
            note[notes,1]=32;notes=notes+1;
          end;
		end;
      end;
    end;
    if (normal = 1) then;do;
	  clbs2="Effect"||"se"||"Z"||"p";
	  if (nmeds = 1) then;do;
	    print sobel [label = "Normal theory test for indirect effect" colname = clbs2 format = &decimals];
      end;
      if (nmeds > 1) then;do;
	    rlbs2=rlbs[2:nrow(rlbs),1];
	    print sobel [label = "Normal theory tests for specific indirect effects" rowname = rlbs2 colname = clbs2 format = &decimals];
      end;
    end; 
	if (conmake = 1) then;do;
	  conlbs=cntname[1:ncol(indcon),1];
      if (ncontr=1) then;do;
        conkey=conkey[2:nrow(conkey),];
	    print conkey [label = "Specific indirect effect contrast definitions" rowname = conlbs];
	  end;
      if (ncontr > 1) then;do;
        print contrast [label = "Specific indirect effect contrast weights" rowname = conlbs colname=mnames format=8.4];
	  end;
	end;
  end; *[dddd];
  if (model = 6) then;do;
    clbs="Effect";
	rlbs="TOTAL"//mnames`;
	obs=indboot[1,]`;
	obsfsum=obs[+,];
	obs=obsfsum//obs;
	indlbl=indlbl[1:nrow(obs),1];
	if (conmake = 1) then;do;
	  obs=obs//indcon[1,]`;
      indlbl=indlbl//cntname[1:ncol(indcon),1];
	end;
	obs2=obs;
	if (boot = 0) then;do;
	  if ((dichy=0) & (effsize = 1)) then;do;
	    clbs="eff"||"eff_ps"||"eff_cs"||"eff/c"||"eff/c'";
		if (ncovs=0) then;do;
	      obs=obs||obs/stddevy||obs*stddevx/stddevy||obs/ctot||obs/mmpaths[nrow(mmpaths),1];
        end;
		if ((ncovs > 0) | (clsdmy >  0)) then;do;
	      obs=obs||obs/sdycov||obs*sdxcov/sdycov||obs/(obsfsum+mmpaths[nrow(mmpaths),1])||obs/mmpaths[nrow(mmpaths),1];
        end;
		obs2=obs;
		if (contrast > 0) then;do;
		  obs2=obs[1:(nrow(obs)-concols),];
		end;
	  end;
	  print obs2 [label = "Indirect effect(s) of X on Y" rowname = indlbl colname = clbs format = &decimals];
	  if ((contrast > 0) & (effsize=1)) then;do;
	    outp2=indcon[1,]`;
		rlbs2=cntname[1:ncol(indcon),1];
		print outp2 [label = "Contrast(s) between indirect effects" rowname=rlbs2 colname=clbs format=&decimals];
	  end;
	end;
	if (boot > 0) then;do;
	  ones=j(boot,1,1);
	  indboot=indboot[,+]||indboot;
	  if (conmake=1) then;do;
	    indboot=indboot||indcon;
	  end;
	  estmte=indboot[1,];
	  indboot=indboot[2:(boot+1),];
	  mnind=indboot[+,]/boot;mnind=mnind`;
	  tmp=indboot##2;tmp=tmp[+,];
      stdind=(sqrt((tmp-((indboot[+,]##2)/boot))/(boot-1)))`;
	  temp=nrow(indboot);
	  llci=j(1,ncol(indboot),-999);
	  ulci=j(1,ncol(indboot),-999);
      do eee = 1 to ncol(indboot);
		inpt=indboot[,eee];inpt2=(estmte[1,eee]*bconoff)+(9999*(1-bconoff));
		%bcboot (databcbt=inpt,estmte=inpt2);
		llci[1,eee]=llcit;
		ulci[1,eee]=ulcit;
		if ((badlo=1) & (llcit ^= priorlo)) then;do;
		  badend=badend||llcit;
		  priorlo=llcit;
		end;
		if ((badhi=1) & (ulcit ^= priorhi)) then;do;
		  badend=badend||ulcit;
		  priorhi=ulcit;
		end;
	  end;
      obs=obs||stdind||llci`||ulci`;
	  clbs="Effect"||"Boot SE"||"BootLLCI"||"BootULCI";
      print obs [label = "Indirect effect(s) of X on Y" rowname = indlbl colname = clbs format = &decimals];
      if ((effsize=1) & (dichy=0)) then;do;
	    indboot=indboot[,1:(ncol(indboot)-concols)];
	    eff=abpseff[,+]||abpseff||abcseff[,+]||abcseff||pmeff[,+]||pmeff||rmeff[,+]||rmeff;
        effobs=eff[1,];
		eff=eff[2:nrow(eff),];
	    tmp=eff##2;tmp=tmp[+,];
        stdindf=(sqrt((tmp-((eff[+,]##2)/boot))/(boot-1)))`;
        llcif=j(1,ncol(eff),-999);
		ulcif=j(1,ncol(eff),-999);
        do eee = 1 to ncol(eff);
		  inpt=eff[,eee];inpt2=(effobs[1,eee]*bconoff)+(9999*(1-bconoff));
		  %bcboot (databcbt=inpt,estmte=inpt2);
		  llcif[1,eee]=llcit;
		  ulcif[1,eee]=ulcit;
		  if ((badlo=1) & (llcit ^= priorlo)) then;do;
		    badend=badend||llcit;
		    priorlo=llcit;
		  end;
		  if ((badhi=1) & (ulcit ^= priorhi)) then;do;
		    badend=badend||ulcit;
		    priorhi=ulcit;
		  end;
	    end;
        temp2=stdindf[1:ncol(indboot),1];
		temp3=effobs[,1:ncol(indboot)];
		templow=llcif[1,1:ncol(indboot)];
		temphi=ulcif[1,1:ncol(indboot)];
		outp=temp3`||temp2||templow`||temphi`;
		print outp [label = "Partially standardized indirect effect of X on Y" colname = clbs rowname = indlbl format = &decimals];
        temp2=stdindf[(ncol(indboot)+1):(2*ncol(indboot)),1];
		temp3=effobs[,(ncol(indboot)+1):(2*ncol(indboot))];
		templow=llcif[1,(ncol(indboot)+1):(2*ncol(indboot))];
		temphi=ulcif[1,(ncol(indboot)+1):(2*ncol(indboot))];
		outp=temp3`||temp2||templow`||temphi`;
		print outp [label = "Completely standardized indirect effect of X on Y" colname = clbs rowname = indlbl format = &decimals];
        temp2=stdindf[(2*(ncol(indboot))+1):(3*ncol(indboot)),1];
        temp3=effobs[,(2*(ncol(indboot))+1):(3*ncol(indboot))];
        templow=llcif[1,(2*(ncol(indboot))+1):(3*ncol(indboot))];
		temphi=ulcif[1,(2*(ncol(indboot))+1):(3*ncol(indboot))];
		outp=temp3`||temp2||templow`||temphi`;
		print outp [label = "Ratio of indirect to total effect of X on Y" colname = clbs rowname = indlbl format = &decimals];
        temp=eff[,(3*(ncol(indboot))+1):(4*(ncol(indboot)))];
		temp2=stdindf[(3*(ncol(indboot))+1):(4*ncol(indboot)),1];
		temp3=effobs[,(3*(ncol(indboot))+1):(4*ncol(indboot))];
		templow=llcif[1,(3*(ncol(indboot))+1):(4*ncol(indboot))];
		temphi=ulcif[1,(3*(ncol(indboot))+1):(4*ncol(indboot))];
		outp=temp3`||temp2||templow`||temphi`;
		print outp [label = "Ratio of indirect to direct effect of X on Y" colname = clbs rowname = indlbl format = &decimals];
	  end;
    end;
    if (nmeds = 2) then;do;
	  effkey=xname||"->"||mnames[1,1]||"->"||yname||" "||" ";
	  tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,2]||"->"||yname;effkey=effkey//tempkey;
	  tempkey=xname||"->"||mnames[1,2]||"->"||yname||" "||" ";effkey=effkey//tempkey;
	  effkey=indlbl[2:4,1]||effkey;
	end;
	if (nmeds = 3) then;do;
	  effkey=xname||"->"||mnames[1,1]||"->"||yname||" "||" "||" "||" ";
	  tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,2]||"->"||yname||" "||" ";effkey=effkey//tempkey;
	  tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,3]||"->"||yname||" "||" ";effkey=effkey//tempkey;
	  tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,2]||"->"||mnames[1,3]||"->"||yname;effkey=effkey//tempkey;
	  tempkey=xname||"->"||mnames[1,2]||"->"||yname||" "||" "||" "||" ";effkey=effkey//tempkey;
	  tempkey=xname||"->"||mnames[1,2]||"->"||mnames[1,3]||"->"||yname||" "||" ";effkey=effkey//tempkey;
	  tempkey=xname||"->"||mnames[1,3]||"->"||yname||" "||" "||" "||" ";effkey=effkey//tempkey;
	  effkey=indlbl[2:8,1]||effkey;
	end;
	if (nmeds = 4) then;do;
      effkey=xname||"->"||mnames[1,1]||"->"||yname||" "||" "||" "||" "||" "||" ";
      tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,2]||"->"||yname||" "||" "||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,3]||"->"||yname||" "||" "||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,4]||"->"||yname||" "||" "||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,2]||"->"||mnames[1,3]||"->"||yname||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,2]||"->"||mnames[1,4]||"->"||yname||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,3]||"->"||mnames[1,4]||"->"||yname||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,1]||"->"||mnames[1,2]||"->"||mnames[1,3]||"->"||mnames[1,4]||"->"||yname;effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,2]||"->"||yname||" "||" "||" "||" "||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,2]||"->"||mnames[1,3]||"->"||yname||" "||" "||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,2]||"->"||mnames[1,4]||"->"||yname||" "||" "||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,2]||"->"||mnames[1,3]||"->"||mnames[1,4]||"->"||yname||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,3]||"->"||yname||" "||" "||" "||" "||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,3]||"->"||mnames[1,4]||"->"||yname||" "||" "||" "||" ";effkey=effkey//tempkey;
      tempkey=xname||"->"||mnames[1,4]||"->"||yname||" "||" "||" "||" "||" "||" ";effkey=effkey//tempkey;
	  effkey=indlbl[2:16,1]||effkey;
	end;
    print effkey [label = "Indirect effect key"];
	if (conmake = 1) then;do;
	  conkey=conkey[2:nrow(conkey),];
	  conlbs=cntname[1:ncol(indcon),1];
	  print conkey [label = "Specific indirect effect contrast definitions" rowname = conlbs];
	end;
  end;
end; 

if (medte2=1) then;do;   ***;
  name=mdlnms2[2:nrow(mdlnms2),1];name=name`;
  tmpdat=datayed[,2:ncol(datayed)];
  dd=tmpdat[,1];
  dd=dd||tmpdat[,(2+nmeds)]||tmpdat[,2:(1+nmeds)];
  stratify=0;
  if (ncovs > 0) then;do;
    cname=cnames;
	dd=dd||tmpdat[,(3+nmeds):(2+nmeds+ncovs)];
  end;
  method=1;samples=boot;
  if (mc > 0) then;do;samples=mc;method=2;end;
  omnibus=1;booterr=0;
  if ((mcx < 0) | (mcx > 4)) then;do;mcx=1;end;
  ovals=ncol(design(dd[,1]));
  nte=notes;criterr=0;xskip=0;dumok=0;badend=0;alpha2=(1-(conf/100))/2;
  y5=sqrt(-2*log(alpha2));
  xp2=-(y5+((((y5*p4+p3)*y5+p2)*y5+p1)*y5+p0)/((((y5*q4+q3)*y5+q2)*y5+q1)*y5+q0));
  priorlo=-9999999;priorhi=9999999;
  ddd={"D1" "D2" "D3" "D4" "D5" "D6" "D7" "D8" "D9"};
  reps=samples;
  if (contrast=1) then;do;note[nte,1]=26;nte=nte+1;end;
  if (effsize=1) then;do;note[nte,1]=27;nte=nte+1;end;
  if (normal=1) then;do;note[nte,1]=28;nte=nte+1;end;
  if (method=2) then;do;
     if (omnibus=1) then;do;note[nte,1]=25;nte=nte+1;end;
	 samples=0;
	 if (reps < 1000) then;do;reps=1000;end;
  end;
  if (method = 1) then;do;samples=reps;end;
  tmp=ncol(dd);n=nrow(dd);ones=j(n,1,1);
  temp=dd[,2];nxd=ncol(temp);nx=nxd;
  if ((nx=1) & (mcx > 0)) then;do; * (1) *;
    temp=dd;temp[rank(dd[,2]),]=dd;dd=temp;
    dummy=design(dd[,2]);
    nvls=ncol(dummy);nnvls=dummy[+,];
    mnvls=min(nnvls`);
    if (mnvls < 2) then;do;criterr=1;errs=errs+1;runerrs[errs,1]=37;end;
    if (nvls > 9) then;do;criterr=1;errs=errs+1;runerrs[errs,1]=36;end;
	if (criterr=0) then;do; * (3) *;
      dumok=1;nnvls=j(nvls,1,0);nnvls[1,1]=dd[1,2];temp=2;
      do i = 2 to n;
        if (dd[i,2] ^= nnvls[(temp-1),1]) then;do;
          nnvls[temp,1]=dd[i,2];temp=temp+1;
        end;
      end;
      if (mcx > 0) then;do; * (2) *;
        x=dummy[,2:ncol(dummy)];nx=ncol(x);minus1=j(1,ncol(x),-1);
		xdes=j((nx+1),3,0);xdes[1,1]=dd[1,2];xdes[1,2]=1;temp=2;
        do k = 2 to n;
          if (dd[k,2] ^= dd[(k-1),2]) then;do;
            xdes[temp,2]=k;xdes[temp,1]=dd[k,2];xdes[(temp-1),3]=k-1;temp=temp+1;
          end;
        end;
		xdes[(temp-1),3]=n;xdes=xdes||(xdes[,3]-xdes[,2]+1);
		if (stratify ^= 0) then;do;note[nte,1]=7;nte=nte+1;end;
        if (mcx = 4) then;do;
	      do k=1 to n;
	        if (x[k,+] = 0) then;do;x[k,]=minus1;end;
	      end;
		end;
        if ((mcx = 2) | (mcx=3)) then;do;
		  note[nte,1]=4;nte=nte+1;
          do k=1 to n;
	        if (x[k,+] > 0) then;do;
	          do i = 1 to ncol(x) while (x[k,i] = 0);x[k,i]=1;end;
	        end;
	      end;
          if (mcx=3) then;do;
            conmat1={-8 1 1 1 1 1 1 1 1,
                   0 -7 1 1 1 1 1 1 1,
                   0 0 -6 1 1 1 1 1 1,
                   0 0 0 -5 1 1 1 1 1,
                   0 0 0 0 -4 1 1 1 1,
                   0 0 0 0 0 -3 1 1 1,
                   0 0 0 0 0 0 -2 1 1,
                   0 0 0 0 0 0 0 -1 1};
            do i = 1 to 8;conmat1[i,]=conmat1[i,]/(10-i);end;
   	        conmat1=conmat1[(10-nvls):8,(10-nvls):9]`;
            do k = 1 to n;
	          x[k,]=conmat1[(x[k,+]+1),];
	        end;
          end;
        end;
        xdata=x;xskip=1;xname=ddd[1,1:nx];indlbs=xname`;
		dummat=j((nx+1),nx,0);
        dummat[(2:nrow(dummat)),]=I(nx);
		if (mcx=4) then;do;dummat[1,]=minus1;end;
        if (mcx=2) then;do;
          do i = 1 to nrow(dummat); 
	        do j = 1 to (i-1);dummat[i,j]=1;end;
	      end;
        end;
        if (mcx=3) then;do;dummat=conmat1;end;
		dummat=nnvls||dummat;
		xname2=name[1,2]||xname;
	  end; * (2) *;
	end; * (3) **;
  end; * (1) *;
  nm=nmeds;r2b=j(nm,1,-999);
  indeff=j((nx*nm),1,-999);
  cov=j((nx*nm+nm),(nx*nm+nm),0);
  mns=j(nrow(cov),1,0);
  ny=ncol(dd)-nm-nxd-ncovs;
  y=dd[,1];
  ydata=y;
  yname=name[1,1];
  if (xskip=0) then;do;
    x=dd[,2:(1+nxd)];xdata=x;xname=name[1,2:(1+nxd)];
	indlbs=xname`;
  end;
  m=dd[,(2+nxd):(1+nxd+nm)];
  mdata=m;
  mlab="M1    ="//"M2    ="//"M3    ="//"M4    ="//"M5    ="//"M6    ="//"M7    ="//"M8    ="//"M9    ="//"M10   =";
  mlab=mlab//"M11   ="//"M12   ="//"M13   ="//"M14    ="//"M15    =";
  mname=name[1,(2+nxd):(1+nxd+nm)];
  if (ncovs > 0) then;do;
    c=dd[,(2+nxd+nm):(1+nxd+nm+ncovs)];
	x=x||c;
	xdata=x;cdata=c;
	xname=xname||cname;
  end;
  nms=yname//mname`//xname[1,1:(ncol(xname)-ncovs)]`;
  if (dumok=1) then;do;nms=yname//mname`//name[1,2];end;
  if (nm < 16) then;do;
    if (dumok=1) then;do;
	    print "Coding of categorical X variable for analysis:";
        print dummat [colname=xname2 label = " " format=5.2];
	end;
  end;
  boots=j((samples+1),((nx+1)*nm),-999);
  if ((errs=0) & (criterr=0)) then;do;  * (4) **;
    do k = 1 to (samples+1); * (10) ;
      if ((k =2) & (savboot=1)) then;do;bootstrp=j(boot,(ncol(bootcoef)),-999);end;
	  bootcoef=0;
	  if (k > 1) then;do;
	     u=floor((ranuni(j(n,1,&seed)))*n)+1;
		 xdata=x[u,];mdata=m[u,];ydata=y[u,];
		 if (ncovs > 0) then;do;cdata=c[u,];end;
	  end;
	  do i = 1 to nm; * (5) **;
        start=1+(i-1)*nx;
		xmat=ones||xdata;
		if (covmy = 2) then;do;xmat=xmat[,1:(ncol(xmat)-ncovs)];end;
		ymat=mdata[,i];
		amat=inv(xmat`*xmat)*xmat`*ymat;
		sstotal = ssq(ymat-((ymat[+,])/n));
		resid=ymat-xmat*amat;
		ssresid=ssq(resid);
		r2=(sstotal-ssresid)/sstotal;
		adjr2=1-((1-r2)*(n-1)/(n-ncol(xmat)));
		mse=ssresid/(n-ncol(xmat));
		r2cha=r2;adjr2cha=adjr2;
        if ((ncovs > 0) & (covmy ^= 2)) then;do;
          xmat=ones||cdata;
		  atmat=inv(xmat`*xmat)*xmat`*ymat;
	      resid2=ymat-(xmat*atmat);
		  ssresid2=ssq(resid2);
		  r2step1=(sstotal-ssresid2)/sstotal;
		  r2cha=r2-r2step1;
		  adjr2cha=adjr2-(1-((1-r2step1)*(n-1)/(n-ncol(xmat))));
		  xmat=ones||xdata;
		end;
		bootcoef=bootcoef||amat`;
		r2b[i,1]=adjr2cha;
		if (k = 1) then;do;
          %hcest (hcdat=xmat,hcres=resid,hctog=hc3,hcmse=mse);
          tratio=amat/sqrt(vecdiag(covmat));
		  rnms=mname[1,i];
		  print "*****************************************************************************************";
		  print rnms [rowname = "Outcome:" label = " "];
          lmat=I(nrow(amat));
          lmat=lmat[,2:ncol(lmat)];
		  fratio=((lmat`*amat)`*inv(lmat`*covmat*lmat)*(lmat`*amat))/(ncol(xmat)-1);
		  pfr=1-probf(fratio,(ncol(xmat)-1),(n-ncol(xmat)));
		  op=sqrt(r2)||r2||mse||fratio||(ncol(xmat)-1)||(n-ncol(xmat))||pfr;
          cnmt="R"||"R-sq"||"MSE"||"F"||"df1"||"df2"||"p";
          print op [label = "Model Summary" colname =cnmt format=&decimals rowname = " "];
		  op=amat||sqrt(vecdiag(covmat))||tratio||(2*(1-probt(abs(tratio),(n-ncol(xmat)))));
		  temp=n-ncol(xmat);
          temp=(temp*(exp((temp-(5/6))*((xp2/(temp-(2/3)+(.11/temp)))*(xp2/(temp-(2/3)+(.11/temp)))))-1));
		  temp1=op[,1]-sqrt(abs(temp))#op[,2];
		  temp2=op[,1]+sqrt(abs(temp))#op[,2];
          op=op||temp1||temp2;
		  rnms="Constant"//xname`;
		  cnmt="coeff"||"se"||"t"||"p"||"LLCI"||"ULCI";
		  print op [label = "Model" colname = cnmt rowname=rnms format=&decimals];
		  cov[start:(start+(nx-1)),start:(start+(nx-1))]=covmat[2:(ncol(covmat)-(ncovs*(covmy ^=2))),2:(ncol(covmat)-(ncovs*(covmy^=2)))];
          if (covcoeff=1) then;do;
			  print covmat[label = "Covariance matrix of regression parameter estimates" rowname=rnms colname=rnms format=&decimals];
		  end;
		end;
		mns[start:(start+(nx-1)),1]=amat[2:(1+nx),];
	  end; * end of (5) *;
	  xmat=ones||mdata||xdata;
	  if (covmy=1) then;do;xmat=xmat[,1:(ncol(xmat)-ncovs)];end;
      ymat=ydata;
	  if (k = 1) then;do;
	    print "*****************************************************************************************";
	    print yname [rowname = "Outcome:" label = " "];
          if (ovals = 2) then;do;
            nmsd=yname||"Analysis";
	      print rcd [label = "Coding of binary DV for analysis" colname=nmsd format=9.2];
	    end;
	  end;
      if (ovals = 2) then;do;
        pt2=j(n,1,(ymat[+,]/n));
        LL3=ymat#log(pt2)+(1-ymat)#log(1-pt2);
        LL3=-2*LL3[+,];
        pt1=j(n,1,0.5);
        bt1=j(ncol(xmat),1,0);
        LL1 = 0;
		LL2=LL3;
        xy22=xmat;
        do jjj = 1 to iterate UNTIL (abs(LL1-LL2) < converge);
		  LL1=LL2;
		  do ijk=1 to ncol(xmat);
		    xy22[,ijk]=xmat[,ijk]#pt1#(1-pt1);
		  end;
		  b=bt1+inv(xy22`*xmat)*xmat`*(ymat-pt1);
		  pt1=1/(1+exp(-(xmat*b)));
		  temp1=((pt1 < .00000000000001) | (pt1 > .9999999999999));
		  itprob=temp1[+,];
		  if (itprob = 0) then;do;
		    LL=ymat#log(pt1)+(1-ymat)#log(1-pt1);
			LL2=-2*LL[+,];
		  end;
		  bt1=b;
		end;
        if ((jjj > iterate) & (iterr=0)) then;do;
		  errs=errs+1;runerrs[errs,1]=22;iterr=1;
          itprob = 2;
        end;
		do ijk=1 to ncol(xmat);
		   xy22[,ijk]=xmat[,ijk]#pt1#(1-pt1);
		end;
		covmat=inv(xy22`*xmat);        
/* here i am */;
		tval=xp2*xp2;
		bmat=b;
		bootcoef=bootcoef||bmat`;
		LL1=LL2;
	  end;
	  if (ovals ^= 2) then;do;
        bmat=inv(xmat`*xmat)*xmat`*ymat;
		sstotal = ssq(ymat-((ymat[+,])/n));
		resid=ymat-xmat*bmat;
		ssresid=ssq(resid);
		r2=(sstotal-ssresid)/sstotal;
		adjr2=1-((1-r2)*(n-1)/(n-ncol(xmat)));
		mse=ssresid/(n-ncol(xmat));
		bootcoef=bootcoef||bmat`;
	  end;
	  if (k = 1) then;do;
        if (ovals = 2) then;do;
          LLdiff=LL3-LL2;
		  pvalue=1-probchi(LLdiff,(nrow(b)-1));
          LL4=LL2;
		  mcF=LLdiff/LL3;
		  cox=1-exp(-LLdiff/n);
		  nagel=cox/(1-exp(-(LL3)/n));
		  pf=LL2||LLdiff||pvalue||mcF||cox||nagel||n;
          cnmt="-2LL"||"Model LL"||"p-value"||"McFadden"||"CoxSnell"||"Nagelkrk"||"n";
		  print pf [label = "Logistic Regression Summary" colname=cnmt format=&decimals rowname = " "];
		  rnms2="Constant"//mname`//xname`;
		  tstat=bmat/sqrt(vecdiag(covmat));
          outp=bmat||sqrt(vecdiag(covmat))||tstat||(2*(1-probnorm(abs(tstat))));
		  temp=bmat-abs(xp2)#sqrt(vecdiag(covmat));
		  outp=outp||temp;
          temp=bmat+abs(xp2)#sqrt(vecdiag(covmat));
		  outp=outp||temp;
          cnmt="Coeff"||"se"||"Z"||"p"||"LLCI"||"ULCI";
		  print outp [label = "Logistic Regression Model" rowname=rnms2 colname=cnmt format=&decimals];
		  opdirsum=outp[(2+nmeds):(1+nmeds+nx),];
		  cov[(ncol(cov)-nm+1):ncol(cov),(ncol(cov)-nm+1):ncol(cov)]=covmat[2:(1+nm),2:(1+nm)];
	    end;
		if (ovals ^= 2) then;do;
          %hcest (hcdat=xmat,hcres=resid,hctog=hc3,hcmse=mse);
          lmat=I(nrow(bmat));
          lmat=lmat[,2:ncol(lmat)];
		  fratio=((lmat`*bmat)`*inv(lmat`*covmat*lmat)*(lmat`*bmat))/(ncol(xmat)-1);
		  lmat=j(ncol(xmat),nx,0);
		  lmat2=I(nx);
		  lmat[(2+nmeds):(2+nmeds+(nx-1)),]=lmat2;
          fratiodr=((lmat`*bmat)`*inv(lmat`*covmat*lmat)*(lmat`*bmat))/nx;
		  pfr=1-probf(fratio,(ncol(xmat)-1),(n-ncol(xmat)));
		  df2=n-ncol(xmat);
		  op=sqrt(r2)||r2||mse||fratio||(ncol(xmat)-1)||(n-ncol(xmat))||pfr;
          cnmt="R"||"R-sq"||"MSE"||"F"||"df1"||"df2"||"p";
          print op [label = "Model Summary" colname =cnmt format=&decimals rowname = " "];
          tratio=bmat/sqrt(vecdiag(covmat));
		  rnms2="Constant"//mname`//xname`;
		  op=bmat||sqrt(vecdiag(covmat))||tratio||(2*(1-probt(abs(tratio),(n-ncol(xmat)))));
		  temp=n-ncol(xmat);
          temp=(temp*(exp((temp-(5/6))*((xp2/(temp-(2/3)+(.11/temp)))*(xp2/(temp-(2/3)+(.11/temp)))))-1));
		  temp1=op[,1]-sqrt(abs(temp))#op[,2];
		  temp2=op[,1]+sqrt(abs(temp))#op[,2];
          op=op||temp1||temp2;
		  cnmt="coeff"||"se"||"t"||"p"||"LLCI"||"ULCI";
		  print op [label = "Model" colname = cnmt rowname=rnms2 format=&decimals];
		  opdirsum=op[(2+nmeds):(1+nmeds+nx),];
		  cov[(ncol(cov)-nm+1):ncol(cov),(ncol(cov)-nm+1):ncol(cov)]=covmat[2:(1+nm),2:(1+nm)];
		  xmat=ones||mdata;
          if (ncovs > 0) then;do;xmat=xmat||cdata;end;
		  btmat=inv(xmat`*xmat)*xmat`*ymat;
		  resid2=ymat-xmat*btmat;
		  ssresid2=ssq(resid2);
		  r2direct=r2-((sstotal-ssresid2)/sstotal);
		  pfr=1-probf(fratiodr,nx,(n-1-nx-nm-ncovs));
		  r2direct=r2direct||fratiodr||nx||(n-1-nx-nm-ncovs)||pfr;
		end;
        if (covcoeff=1) then;do;
		  print covmat[label = "Covariance matrix of regression parameter estimates" rowname=rnms colname=rnms format=&decimals];
		end;
	  end; * end of (7)*;
      if ((k = 1) & (toteff = 1)) then;do;  * (8);
      	print "*********************************** TOTAL EFFECT MODEL **********************************";
	    print yname [rowname = "Outcome:" label = " "];
        xmat=ones||xdata;
		if (covmy=1) then;do;xmat=xmat[,1:(ncol(xmat)-ncovs)];end;
        ymat=ydata;
		if (ovals = 2) then;do;
          pt2=j(n,1,(ymat[+,]/n));
          LL3=ymat#log(pt2)+(1-y)#log(1-pt2);
          LL3=-2*LL3[+,];
          pt1=j(n,1,0.5);
          bt1=j(ncol(xmat),1,0);
          LL1 = 0;
		  LL2=LL3;
	      %logit2 (pt1lp=pt1,xlp=xmat,ylp=ymat);
          if (jjj > &iterate) then;do;
            itprob = 2;
          end;
		  tval=xp2*xp2;bmat=b;covmat=barb;LL1=LL2;
		  LLdiff=LL3-LL2;
		  pvalue=1-probchi(LLdiff,(nrow(bmat)-1));
		  LL4=LL2;
		  mcF=LLdiff/LL3;
		  cox=1-exp(-LLdiff/n);
		  nagel=cox/(1-exp(-(LL3)/n));
		  pf=LL2||LLdiff||pvalue||mcF||cox||nagel||n;
          cnmt="-2LL"||"Model LL"||"p-value"||"McFadden"||"CoxSnell"||"Nagelkrk"||"n";
		  print pf [label = "Logistic Regression Summary" colname=cnmt format=&decimals rowname = " "];
		  rnms="Constant"//xname`;
		  tstat=bmat/sqrt(vecdiag(covmat));
          outp=bmat||sqrt(vecdiag(covmat))||tstat||(2*(1-probnorm(abs(tstat))));
		  temp=bmat-abs(xp2)#sqrt(vecdiag(covmat));
		  outp=outp||temp;
          temp=bmat+abs(xp2)#sqrt(vecdiag(covmat));
		  outp=outp||temp;
          cnmt="Coeff"||"se"||"Z"||"p"||"LLCI"||"ULCI";
		  print outp [label = "Logistic Regression Model" rowname=rnms colname=cnmt format=&decimals];
          optotsum=outp[2:(1+nx),];
		end;
		if (ovals ^= 2) then;do;  * (9);
          cmat=inv(xmat`*xmat)*xmat`*ymat;
		  sstotal = ssq(ymat-((ymat[+,])/n));
		  resid=ymat-xmat*cmat;
		  ssresid=ssq(resid);
		  r2=(sstotal-ssresid)/sstotal;
		  adjr2=1-((1-r2)*(n-1)/(n-ncol(xmat)));
		  mse=ssresid/(n-ncol(xmat));
          %hcest (hcdat=xmat,hcres=resid,hctog=hc3,hcmse=mse);
          lmat=I(nrow(cmat));
          lmat=lmat[,2:ncol(lmat)];
		  fratio=((lmat`*cmat)`*inv(lmat`*covmat*lmat)*(lmat`*cmat))/(ncol(xmat)-1);
		  pfr=1-probf(fratio,(ncol(xmat)-1),(n-ncol(xmat)));
		  op=sqrt(r2)||r2||mse||fratio||(ncol(xmat)-1)||(n-ncol(xmat))||pfr;
          cnmt="R"||"R-sq"||"MSE"||"F"||"df1"||"df2"||"p";
          print op [label = "Model Summary" colname =cnmt format=&decimals rowname = " "];
          tratio=cmat/sqrt(vecdiag(covmat));
		  rnms="Constant"//xname`;
		  op=cmat||sqrt(vecdiag(covmat))||tratio||(2*(1-probt(abs(tratio),(n-ncol(xmat)))));
		  temp=n-ncol(xmat);
          temp=(temp*(exp((temp-(5/6))*((xp2/(temp-(2/3)+(.11/temp)))*(xp2/(temp-(2/3)+(.11/temp)))))-1));
		  temp1=op[,1]-sqrt(abs(temp))#op[,2];
		  temp2=op[,1]+sqrt(abs(temp))#op[,2];
          op=op||temp1||temp2;
		  cnmt="coeff"||"se"||"t"||"p"||"LLCI"||"ULCI";
		  print op [label = "Model" colname = cnmt rowname=rnms format=&decimals rowname = " "];
		  optotsum=op[2:(1+nx),];
		  ssresid2=ssresid;
		  r2total=r2;
		  lmat=j(ncol(xmat),nx,0);
		  lmat2=I(nx);
		  lmat[2:(1+nx),]=lmat2;
		  fratio3=((lmat`*cmat)`*inv(lmat`*covmat*lmat)*(lmat`*cmat))/nx;
		  if (ncovs > 0) then;do;
            xmat=ones||cdata;
			ctmat=inv(xmat`*xmat)*xmat`*ymat;
			ssres2=ymat-xmat*ctmat;
		    ssresid2=ssq(ssres2);
			r2total=r2-((sstotal-ssresid2)/sstotal);
		  end;
		  pfr=1-probf(fratio3,nx,(n-1-nx-ncovs));
		  r2tot2=r2total||fratio3||nx||(n-1-nx-ncovs)||pfr;
		end; * end of (9) *;
        if (covcoeff=1) then;do;
		  print covmat[label = "Covariance matrix of regression parameter estimates" rowname=rnms colname=rnms format=&decimals];
		end;	
	  end; * end of (8) ** ;
	  mns[(nrow(mns)-nm+1):nrow(mns),1]=bmat[2:(1+nm),];
      tmp=1;
	  do i =  1 to (nx*nm);
	    boots[k,i]=mns[i,1]#mns[((nm*nx)+tmp),1];
		if ((i/nx) = floor(i/nx)) then;do;
		  boots[k,((nm*nx)+tmp)]=r2b[tmp,1]*mns[((nm*nx)+tmp),1];
		  tmp=tmp+1;
		end;
	  end;
	  if ((savboot=1) & (k > 1)) then;do;
	    bootstrp[(k-1),]=bootcoef;
	  end;
	end; * end of (10) *;
    if (method=1) then;do;
      llci=j(1,ncol(boots),-999);
	  ulci=j(1,ncol(boots),-999);
	  indeff=boots[1,1:(nm*nx)]`;
	  indeff22=boots[1,]`;
	  omni=(boots[1,((nm*nx)+1):ncol(boots)])`;
	  if (nrow(boots) > 1) then;do;
        boots=boots[2:nrow(boots),];
		tmp=boots##2;tmp=tmp[+,];
		bootse=(sqrt((tmp-((boots[+,]##2)/reps))/(reps-1)))`;
		do i = 1 to ncol(boots);
          inpt=boots[,i];inpt2=(indeff22[i,1]*bconoff)+(9999*(1-bconoff));
		  %bcboot (databcbt=inpt,estmte=inpt2);
		  llci[1,i]=llcit;ulci[1,i]=ulcit;
		  if ((badlo = 1) & (llcit ^= priorlo)) then;do;
            badend=badend||llcit;
			priorlo=llcit;
		  end;
		  if ((badhi = 1) & (llcit ^= priorhi)) then;do;
            badend=badend||ulcit;
		  end;
		end;
		llci=llci`;ulci=ulci`;llci=llci||ulci;
	  end;
	end;
    if (method = 2) then;do;
      tmp=1;
	  do i = 1 to (nx*nm);
        indeff[i,1]=mns[i,1]#mns[((nm*nx)+tmp),1];
		if ((i/nx) = floor(i/nx)) then;do;tmp=tmp+1;end;
	  end;
	  boots=sqrt(-2*log(ranuni(j(reps,nrow(cov),&seed))))#cos((2*3.14159265358979)*(ranuni(j(reps,nrow(cov),&seed))));
	  boots=boots*root(cov);
	  do i = 1 to ncol(boots);
        boots[,i]=boots[,i]+mns[i,1];
      end;
	  tmp=1;
	  do i = 1 to (nm*nx);
	    boots[,i]=boots[,i]#boots[,((nm*nx)+tmp)];
        temp=boots[,i];temp[rank(boots[,i]),]=boots[,i];boots[,i]=temp;
		if ((i/nx)=floor(i/nx)) then;do;tmp=tmp+1;end;
      end;
	  boots=boots[,1:(nm*nx)];	  
	  tmp=boots##2;tmp=tmp[+,];
	  bootse=(sqrt((tmp-((boots[+,]##2)/reps))/(reps-1)))`;
	  llci=boots[cilow,]//boots[cihigh,];llci=llci`;
    end;
    if (toteff=0) then;do;
	  print "****************************** DIRECT AND INDIRECT EFFECTS ******************************";
	end;
	if (toteff ^= 0) then;do;
      print "************************** TOTAL, DIRECT, AND INDIRECT EFFECTS **************************";
      rnmssum=rnms[2:(1+nx),1];
	  if (ovals ^= 2) then;do;
		cnmt="coeff"||"se"||"t"||"p"||"LLCI"||"ULCI";
	    print optotsum [label = "Relative total effects of X on Y" colname = cnmt rowname=rnmssum format=&decimals];
		cnmt2="R-sq"||"F"||"df1"||"df2"||"p";
        print r2tot2 [label = "Omnibus test of total effect of X on Y" colname = cnmt2 format=&decimals rowname = " "];
	  end;
	  if  (ovals = 2) then;do;
		cnmt="coeff"||"se"||"Z"||"p"||"LLCI"||"ULCI";
	    print optotsum [label = "Relative total effects of X on Y" colname = cnmt rowname=rnmssum format=&decimals];
	  end;
	  print "=======";
	end;
    rnmssum=rnms2[(2+nmeds):(1+nmeds+nx),1];
	if (ovals ^=2 ) then;do;
	  cnmt="coeff"||"se"||"t"||"p"||"LLCI"||"ULCI";
	  print opdirsum [label = "Relative direct effects of X on Y" colname = cnmt rowname=rnmssum format=&decimals];
	  cnmt2="R-sq"||"F"||"df1"||"df2"||"p";
      print r2direct [label = "Omnibus test of direct effect of X on Y" colname = cnmt2 format=&decimals rowname = " "];
	end;
	if (ovals = 2) then;do;
	  cnmt="coeff"||"se"||"Z"||"p"||"LLCI"||"ULCI";
	  print opdirsum [label = "Relative direct effects of X on Y" colname = cnmt rowname=rnmssum format=&decimals];
	end;
	print "=======";
    if ((omnibus = 1) & ((method = 1) | (method = 3))) then;do;
	  indlbs=indlbs//"Omnibus";
	end;
	do i = 1 to nm;
      op=mname[1,i];
	  print op [label = "Relative indirect effect(s) of X on Y through:"];
	  if (method = 2) then;do;
	    clbs="Effect"||"SE MC"||"MC LLCI"||"MC ULCI";
		op=indeff||bootse[1:(nx*nm),]||llci;
	  end;
	  if (method = 1) then;do;
	    clbs="Effect"||"SE(boot)"||"LLCI"||"ULCI";
		op=indeff;
		if (samples > 0) then;do;op=indeff||bootse[1:(nm*nx),]||llci[1:(nx*nm),];end;
	  end;
	  temp=op[(((i-1)*nx)+1):(nx*i),];
	  if ((method=1) & (omnibus=1)) then;do;
	    if (samples = 0) then;do;temp=temp//omni[i,1];end;
		if (samples > 0) then;do;
		  temp2=omni[i,1]||bootse[((nm*nx)+i),]||llci[((nm*nx)+i),];
          temp=temp//temp2;
		end;
      end;
	  print temp [label=" " rowname=indlbs colname=clbs format=&decimals];
	end;
  end;  * end of (4) *;
  if (savboot=1) then;do;bootstrp=bootstrp[,2:ncol(bootstrp)];
    create &save from bootstrp;
    append from bootstrp;
  end;
  if (itprob = 1) then;do;
    print "ERROR: There was a problem during iteration.";
  end;
  if (itprob = 2) then;do;
    errs=errs+1;
    runerrs[errs,1]=22;
  end;
end;  ****;

if (mdpbe=1) then;do;
  yname={&y};xname={&x};mnames={&m};
  nm=yname||xname||mnames;
  if (ncovs > 0) then;do;
    nm=yname||cnames||xname||mnames;
  end;
  tpx=xname;x=dd[,2:ncol(dd)];typ=yname;
  n=nrow(dd);
  nx=1;
  criterr=0;
  ddd={"D1" "D2" "D3" "D4" "D5" "D6" "D7" "D8" "D9"};
  ddd1={"int_1" "int_2" "int_3" "int_4" "int_5" "int_6" "int_7" "int_8" "int_9"};
  dumok=0;
  mcfoc=mcx;mcmod=mcm;
  mcloc=(mcfoc > 0);
  con=j(n,1,1);
  ncovs=ncol(x)-2;

  if ((mcfoc > 0) | (mcmod >0)) then;do;
    temp=dd;temp[rank(dd[,(ncol(dd)-mcloc)]),]=dd;dd=temp;
    dummy=design(dd[,(ncol(dd)-mcloc)]);
    nvls=ncol(dummy);nnvls=dummy[+,];
    toosmall=(nnvls < 2);toosmall=toosmall[,+];
    mnvls=min(nnvls`);
    if (toosmall > 0) then;do;criterr=1;errs=errs+1;runerrs[errs,1]=37;end;
    if (nvls > 9) then;do;criterr=1;errs=errs+1;runerrs[errs,1]=36;end;
    if (criterr=0) then;do;
      dumok=1;
      nnvls=j(nvls,1,0);
      nnvls[1,1]=dd[1,ncol(dd)-mcloc];
      temp=2;
      do i = 2 to n;
        if (dd[i,ncol(dd)-mcloc] ^= nnvls[(temp-1),1]) then;do;
          nnvls[temp,1]=dd[i,ncol(dd)-mcloc];temp=temp+1;
        end;
      end;
      dummy=dummy[,2:ncol(dummy)];
      if ((mcfoc=4) | (mcmod=4)) then;do;
        minus1=j(1,ncol(dummy),-1);
	    do k=1 to n;
	      if (dummy[k,+] = 0) then;do;dummy[k,]=minus1;end;
	    end;
      end;
      if (((mcfoc=2) | (mcfoc=3)) | ((mcmod=2) | (mcmod=3))) then;do;
        do k=1 to n;
	      if (dummy[k,+] > 0) then;do;
	        do i = 1 to ncol(dummy) while (dummy[k,i] = 0);
  		      dummy[k,i]=1;
		    end;
	      end;
	    end;
        if ((mcfoc=3)|(mcmod=3)) then;do;
          conmat1={-8 1 1 1 1 1 1 1 1,
                   0 -7 1 1 1 1 1 1 1,
                   0 0 -6 1 1 1 1 1 1,
                   0 0 0 -5 1 1 1 1 1,
                   0 0 0 0 -4 1 1 1 1,
                   0 0 0 0 0 -3 1 1 1,
                   0 0 0 0 0 0 -2 1 1,
                   0 0 0 0 0 0 0 -1 1};
          do i = 1 to 8;conmat1[i,]=conmat1[i,]/(10-i);end;
   	      conmat1=conmat1[(10-nvls):8,(10-nvls):9]`;
          do k = 1 to n;
	        dummy[k,]=conmat1[(dummy[k,+]+1),];
	      end;
        end;
      end;
      nx=ncol(dummy);
      xname=ddd[1,1:nx];
      xdata=dummy;
      xname2=nm[1,(ncol(nm)-mcloc)];
	  xname2=xname2||xname;
      indlbs=xname`;
      dummat=j((nx+1),nx,0);
      dummat[(2:nrow(dummat)),]=I(nx);
      if ((mcfoc=2)|(mcmod=2)) then;do;
        do i = 1 to nrow(dummat); 
	      do j = 1 to (i-1);
	        dummat[i,j]=1;
	      end;
	    end;
      end;
      if ((mcfoc=3) | (mcmod=3)) then;do;dummat=conmat1;end;
      if ((mcfoc=4) | (mcmod=4)) then;do;dummat[1,]=minus1;end;
    end;
    dummat=nnvls||dummat;
  end;
  if (criterr=0) then;do;  
  y=dd[,1];
  ovals=ncol(design(dd[,1]));
  itprob = 0;
  if (ovals = 2) then;do;
    omx = max(y[,1]);
    omn = min(y[,1]);
    y[,1]=(y[,1]=omx);
    rcd = (omn||0)//(omx||1);
  end;
  sstotal = ssq(y-((y[+,])/n));
  outv=nm[1,1]`;
  mdtr = nm[1,ncol(nm)];
  fciv = nm[1,ncol(nm)-1];
  if ((mcfoc ^=0) | (mcmod ^=0)) then;do;
    inter=j(n,nx,0);
	do i = 1 to nx;
	  inter[,i] = dummy[,i]#dd[,(ncol(dd)-(1-mcloc))];
    end;
    if (ncovs = 0) then;do;
      x=con||dd[,(ncol(dd)-(1-mcloc))]||dummy;
      x=x||inter;
	  nms=nm[1,(ncol(dd)-(1-mcloc))]||(ddd[1,1:ncol(dummy)])||(ddd1[1,1:ncol(dummy)]);
	end;
	if (ncovs > 0) then;do;
	  x=con||dd[,2:(1+ncovs)]||dd[,(ncol(dd)-(1-mcloc))]||dummy;
      x=x||inter;
	  nms=nm[1,2:(1+ncovs)]||nm[1,(ncol(dd)-(1-mcloc))]||(ddd[1,1:ncol(dummy)])||(ddd1[1,1:ncol(dummy)]);
	end;
  end;
  xmns=x[+,]/n;
  focvals = 1||0||0;
  highwarn = 0;lowwarn = 0;
  if (ncol(x) > (2*nx+2)) then;do;
    covmns = 1||xmns[1,2:(ncol(x)-1-(2*nx))];
    focvals = covmns||0||0;
  end;
  dfres = n-ncol(x);
  if (ovals = 2) then;do;
    pt2=j(n,1,(y[+,]/n));
    LL3=y#log(pt2)+(1-y)#log(1-pt2);
    LL3=-2*LL3[+,];
    pt1=j(n,1,0.5);
    bt1=j(ncol(x),1,0);
    LL1 = 0;
    LL2 = LL3;
	%logit2 (pt1lp=pt1,xlp=x,ylp=y);
    if (jjj > &iterate) then;do;
      itprob = 2;
    end;
  tval=xp2*xp2;
  end;
  if (ovals ^= 2) then;do;
    invxtx=inv(x`*x);
    b=invxtx*x`*y;
    resid=y-(x*b);
    ssresid=ssq(resid);
    msresid=ssresid/dfres;
    varb=msresid*inv(x`*x);
	seint=sqrt(varb[nrow(varb),nrow(varb)]);
    k3=nrow(b);
    if (hc3 = 1) then;do;
	  xhc=x;h=xhc[,1];
      do i3=1 to n;
	    h[i3,1]=xhc[i3,]*invxtx*(xhc[i3,])`;
	  end;
	  do i3=1 to k3;
	    xhc[,i3]=(resid[,ncol(resid)]/(1-h))#xhc[,i3];
	  end;
	  varb=(invxtx*xhc`*xhc*invxtx);
	end;
    seb = sqrt(vecdiag(varb));
    r2=1-(ssresid/sstotal);
    if ((mcfoc ^= 0) | (mcmod ^=0)) then;do;
      ytp=y;
	  xtp=x[,1:(ncol(x)-nx)];
	  btp=inv(xtp`*xtp)*xtp`*ytp;
	  residt=ytp-(xtp*btp);
	  ssresidt=ssq(residt);
	  r2noint=1-(ssresidt/sstotal);
    end;
    pr=ncol(x)-1;
    lmat=I(nrow(b));lmat=lmat[,2:ncol(lmat)];
    f=(((lmat`)*b)`*inv(lmat`*varb*lmat)*(lmat`*b))/pr;
    pf=1-probf(f,pr,dfres);
    pf=sqrt(r2)||r2||msresid||f||pr||dfres||pf;
    xd=abs(xp2);
  end;
  if (itprob = 0) then;do;
    tstat = b/seb; 
    if (ovals ^= 2) then;do;
      p=2*(1-probt(abs(tstat),dfres));
    end;
    if (ovals = 2) then;do;
      p=2*(1-probnorm(abs(tstat)));
    end;
    outp=b||seb||tstat||p;
    nms="CONSTANT"//nms`//"INTERACT"; 
    if (ovals ^=2) then;do;
      tval=(dfres*(exp((dfres-(5/6))*((xd/(dfres-(2/3)+(.11/dfres)))*(xd/(dfres-(2/3)+(.11/dfres)))))-1));
	  outp=outp||(b-sqrt(tval)#seb)||(b+sqrt(tval)#seb);
    end;
    bb=tval;
    if (dumok = 1) then;do;
      if (mcfoc > 0) then;do;
	    print "Coding of categorical focal predictor for analysis:";
        print dummat [colname=xname2 label = " " format=5.2];
      end;
	  if (mcmod > 0) then;do;
	    print "Coding of categorical moderator variable for analysis:";
        print dummat [colname=xname2 label = " " format=5.2];
      end;
	end;
    print "*****************************************************************************";

  if (ovals = 2) then;do;
    nmsd = outv||"Analysis";
	print "Coding of binary Y for analysis:";
    print rcd [colname = nmsd label = " " format = 5.2];
	outp=outp||(outp[,1]-sqrt(tval)#outp[,2])||(outp[,1]+sqrt(tval)#outp[,2]);
    LLdiff = LL3-LL2;
	LL4=LL2;
	pvalue=1-probchi(LLdiff,(nrow(b)-1));
    mcF = LLdiff/LL3;
    cox = 1-exp(-LLdiff/n);
    nagel=cox/(1-exp(-(LL3)/n));
    pf = LL2||LLdiff||pvalue||mcF||cox||nagel||n;
    cns = {"-2LL" "Model LL" "p-value" "McFadden" "CoxSnell" "Nagelkrk" "n"};
	rntmp=" ";
    print pf [colname = cns rowname = " " label = "Logistic Regression Summary" format = &decimals];
    cns = {"Coeff" "se" "Z" "p" "LLCI" "ULCI"};
    print outp [rowname = nms colname = cns label = "Model" format = &decimals];
    if (covcoeff=1) then;do;print varb [label="Covariance matrix of regression parameter estimates" colname=nms rowname=nms format=&decimals];end;
	varbtmp=varb;btmp=b;LL2f=LL2;pt1lp=j(n,1,0.5);
	ylp=y;xlp=x[,1:(ncol(x)-nx)];
	bt1=j(ncol(xlp),1,0);
	%logit2 (pt1lp=pt1lp,xlp=xlp,ylp=ylp);
	LLdiff=LL2-LL2f;
	b=btmp;varb=varbtmp;
	pchi=1-probchi(LLdiff,nx);
	rcha=LLdiff||nx||pchi;
  end;

  if (ovals ^= 2) then;do;
	cns = {"R" "R-sq" "MSE" "F" "df1" "df2" "p"};
	blk=" ";
    print pf [colname = cns rowname = blk label = "Model Summary" format = &decimals];
    lmat=j(nrow(b),1,0);lmat[nrow(lmat),1]=1;
    fcha=((((lmat`)*b)`*inv(lmat`*varb*lmat)*(lmat`*b)))/1;
	rcha=((b[nrow(b),1]/seint)*(b[nrow(b),1]/seint))*(1-r2)/dfres;
    rcha = rcha||fcha||1||dfres||outp[(pr+1),4];
    cns = {"Coeff" "se" "t" "p" "LLCI" "ULCI"};
    print outp [rowname = nms colname = cns label = "Regression Model" format = &decimals];
    if (covcoeff=1) then;do;print varb [label="Covariance matrix of regression parameter estimates" colname=nms rowname=nms format=&decimals];end;  
      if ((mcfoc > 0) | (mcmod > 0)) then;do;
	    rcha=r2-r2noint;
        lmat=j((nrow(b)-nx),nx,0);
		lmat2=I(nx);lmat=lmat//lmat2;
		fcha=((((lmat`)*b)`*inv(lmat`*varb*lmat)*(lmat`*b)))/nx;
		pvalr2c=1-probf(fcha,nx,dfres);
		rcha=rcha||fcha||nx||dfres||pvalr2c;
	  end;
	end;
  if ((mcfoc > 0) | (mcmod > 0)) then;do;
	intkey="a"||"b"||"c"||"d"||"e";
    do i = 1 to nx;
	  tmpintk=ddd1[1,i]||" : "||ddd[1,i]||" X "||nm[1,(ncol(dd)-(1-mcloc))];
	  intkey=intkey//tmpintk;
    end;
	intkey=intkey[2:nrow(intkey),];
	print intkey [label = "Product terms key:"];
  end;
  if (ovals ^= 2) then;do;
    cns = {"R2-chng" "F" "df1" "df2" "p"};
	print rcha [label = "R-square increase due to interaction:" colname=cns format=&decimals];
  end;
  if (ovals = 2) then;do;
    cns = {"Chi-sq" "df" "p"};
	print rcha [label = "Likelihood ratio test for interaction" colname=cns format=&decimals];
  end;
  print "*****************************************************************************";	
  mdvar=x[,(ncol(x)-1)];
  if ((mcfoc = 0) & (mcmod = 0)) then;do;
    g1=b[(ncol(x)-2),1];
    g3=b[ncol(x),1];
    vg1=varb[(ncol(x)-2),(ncol(x)-2)];
    vg3=varb[ncol(x),ncol(x)];
    covg1g3=varb[(ncol(x)-2),ncol(x)];
  end;
  if ((mcfoc > 0) | (mcmod > 0)) then;do;
    mdvar=x[,(ncol(x)-(2*nx))];
  end;
  mdmin=min(mdvar);
  mdmax=max(mdvar);
  fvar=x[,(ncol(x)-2)];
  nval=ncol(design(mdvar));
  fvmin=min(fvar);
  fvmax=max(fvar);
  if (mmodval = 999) then;do;
    mnmd=mdvar[+]/n;
    tmp=j(n,1,mnmd);
    sdmd = sqrt(ssq(mdvar-tmp)/(n-1));
    probeval = (mnmd-sdmd)//mnmd//(mnmd+sdmd);
    if (probeval[1,1] < mdmin) then;do;lowwarn=1;probeval[1,1]=mdmin;end;
	  if (probeval[nrow(probeval),1] > mdmax) then;do;highwarn=1;probeval[nrow(probeval),1]=mdmax;end;
        if (quantile=1) then;do;
          tmp=mdvar;tmp[rank(mdvar[,1]),]=mdvar;mdvar=tmp;
	      probeval=mdvar[floor(0.10*n),1]//mdvar[floor(0.25*n),1]//mdvar[floor(0.5*n),1]//mdvar[floor(0.75*n),1]//mdvar[floor(0.90*n),1];
		end;
      end;
      if (nval = 2) then;do;
        probeval = j(2,1,0);
        probeval[1,1]=min(mdvar);
        do i = 1 to n;
          if (mdvar[i,1] ^= probeval[1,1]) then;do;
   	        probeval[2,1]=mdvar[i,1];
	        goto stpit;
	      end;
        end;
        stpit:
      end;
      if (mmodval ^= 999) then;do;
        probeval=mmodval;
      end;
	  outp = j(nrow(probeval),7,0);
	  if ((mcfoc > 0) | (mcmod > 0)) then;do;
        focvals=j(1,(ncol(x)+1),1);
		if (mcfoc > 0) then;do;
		  print "Conditional Effect of Focal Predictor at values of the moderator:";
		  rnn2=mdtr;
		  matt=j(nx,6,0);
		end;
        do jj = 1 to nrow(probeval);
          if (mcfoc > 0) then;do;
            do ii = 1 to nx;
              g1=b[(ncol(x)-(2*nx)+ii),1];
		      g3=b[(ncol(x)-nx+ii),1];
			  vg1=varb[(ncol(x)-(2*nx)+ii),(ncol(x)-(2*nx)+ii)];
			  vg3=varb[(ncol(x)-nx+ii),(ncol(x)-nx+ii)];
			  covg1g3=varb[(ncol(x)-(2*nx)+ii),(ncol(x)-nx+ii)];
			  x2=probeval[jj,1];
			  w1=g1+g3*x2;
			  varw1=vg1+(2*x2*covg1g3)+((x2*x2)*vg3);
			  sew1=sqrt(varw1);
			  t1=w1/sew1;
			  if (ovals ^= 2) then;do;
			    LLCI=(w1-sqrt(tval)#sew1);
			    ULCI=(w1+sqrt(tval)#sew1);
				p=2*(1-probt(abs(t1),dfres));
				cnms="Coeff"||"se"||"t"||"p"||"LLCI"||"ULCI";
				matt[ii,]=w1||sew1||t1||p||llci||ulci;
			  end;
			  if (ovals = 2) then;do;
				LLCI=(w1-sqrt(tval)#sew1);
				ULCI=(w1+sqrt(tval)#sew1);
				p=2*(1-probnorm(abs(t1)));
				cnms="Coeff"||"se"||"Z"||"p"||"LLCI"||"ULCI";		
				matt[ii,]=w1||sew1||t1||p||llci||ulci;
              end; 
			end;
            rnms=xname`;
			mdvalpr=probeval[jj,1];
			print mdvalpr [label="Moderator value:" rowname=rnn2 format=&decimals];
			print matt [label=" " rowname=rnms colname=cnms format=&decimals];
			xprob=x[,(ncol(x)-(2*nx))]-mdvalpr;
			do kk = 1 to nx;
			  xprob=xprob||(xprob[,1]#x[,(ncol(x)-(2*nx)+kk)]);
			end;
			xprob=x[,(1:(ncol(x)-(2*nx)-1))]||xprob;
			if (ovals ^= 2) then;do;
              bmultc=inv(xprob`*xprob)*xprob`*y;
			  residc=y-(xprob*bmultc);
		      ssresidc=ssq(residc);
			  r2c=r2-(1-(ssresidc/sstotal));
			  fcha2=(dfres*r2c)/(nx*(1-r2));
			  *start here;
              if (hc3 = 1) then;do;
				do kk=1 to nx;
				  xprob=xprob||x[,(ncol(x)-(2*nx)+kk)];
				end;
                bmultc=inv(xprob`*xprob)*xprob`*y;
				k3=nrow(bmultc);
                xhc=xprob;h=xhc[,1];
                do i3=1 to n;
	              h[i3,1]=xhc[i3,]*inv(xprob`*xprob)*(xhc[i3,])`;
	            end;
	            do i3=1 to k3;
	              xhc[,i3]=(resid[,ncol(resid)]/(1-h))#xhc[,i3];
	            end;
	            varbc=(inv(xprob`*xprob)*xhc`*xhc*inv(xprob`*xprob));
				lmat=j((nrow(bmultc)-nx),nx,0);
                lmat2=I(nx);
				lmat=lmat//lmat2;
				fcha2=((((lmat`)*bmultc)`*inv(lmat`*varbc*lmat)*(lmat`*bmultc)))/nx;
	          end;
		      pvalr2cc=1-probf(fcha2,nx,dfres);
			  rcha2=r2c||fcha2||nx||dfres||pvalr2cc;
			  cnms="R2-chng"||"F"||"df1"||"df2"||"p";
			  print rcha2 [label = "Test of equality of conditional means at this value of the moderator"
			  colname = cnms format = &decimals];
			end;
			if (ovals = 2) then;do;
              btmp=b;
			  pt1lp=j(j,1,0.5);
			  ylp=y;
			  xlp=xprob;
			  bt1=j(ncol(xlp),1,0);
			  %logit2 (pt1lp=pt1,xlp=xlp,ylp=ylp);
			  LLdiff=LL2-LL4;
			  b=btmp;
			  varb=varbtmp;
			  pchi=1-probchi(lldiff,nx);
			  rcha2=LLdiff||nx||pchi;
			  cnms="Chi-sq"||"df"||"p";
			  print "Test of equality of log odds conditioned on this value of the moderator";
			  print rcha2 [label = " " colname = cnms format = &decimals];
			end;
          end;


          ttttt=j(nrow(dummat),1,probeval[jj,1]);
		  ttttt=ttttt||dummat[,2:ncol(dummat)];
		  do kkk=1 to nx;
            ttttt=ttttt||(ttttt[,1]#ttttt[,(1+kkk)]);
		  end;
		  ones=j(nrow(dummat),1,1);
          if (ncol(x) > (2*nx+2)) then;do;
            covmnmat=j(nrow(ttttt),ncol(covmns),0);
			do kkk=1 to nrow(ttttt);
              covmnmat[kkk,]=covmns;
			end;
			ttttt=covmnmat||ttttt;
		  end;
		  if (ncol(x) <= (2*nx+2)) then;do;
            ttttt=ones||ttttt;
		  end;
		  focmtt=dummat[,1]||ttttt;
          focvals=focvals//focmtt;
		  if (mcfoc > 0) then;do;
            yhat=dummat[,1]||(ttttt*b);
		    cmnms=fciv||"yhat";
			if (ovals ^= 2) then;do;
			  print "Estimated conditional means at this value of the moderator";
			end;
			if (ovals = 2) then;do;
			  print "Estimated conditional log odds at this value of the moderator";
			end;
			print yhat [label = " " colname = cmnms format=&decimals];
			if (jj ^= nrow(probeval)) then;do;
		      print "---------------------------------";
			end;
		  end;
		end;
        focvals=focvals[2:nrow(focvals),];
		yhat=focvals[,2:ncol(focvals)]*b;
		focvals=focvals[,1]||focvals[,(ncol(focvals)-(2*nx))]||yhat;
		cnms=fciv||mdtr||yname;
		if (mcmod > 0) then;do;
          cnms=mdtr||fciv||yname;
		end;
      end;

      if (mcmod > 0) then;do;
        outp=j((nx+1),7,0);
		bcatm=b[(ncol(x)-(2*nx)),1]//b[(ncol(x)-nx+1):ncol(x),1];
		outp[,1]=dummat[,1];
		bcatcov=varb[(ncol(x)-nx):ncol(x),(ncol(x)-nx):ncol(x)];
		bcatcov[1,1]=varb[(ncol(x)-(2*nx)),(ncol(x)-(2*nx))];
		bcatcov[2:nrow(bcatcov),1]=varb[(ncol(x)-nx+1):ncol(x),(ncol(x)-2*nx)];
		bcatcov[1,2:nrow(bcatcov)]= (varb[(ncol(x)-nx+1):ncol(x),(ncol(x)-2*nx)])`;
		do i = 1 to nrow(dummat);
		  catmval=1||dummat[i,2:ncol(dummat)];
	      condeff=catmval*bcatm;
		  condse=sqrt(catmval*bcatcov*catmval`);
		  outp[i,2:3]=condeff||condse;
		end;
		outp[,4]=outp[,2]/outp[,3];
		outp[,5]=2*(1-probt(abs(outp[,4]),dfres));
		outp[,6]=outp[,2]-sqrt(tval)#outp[,3];
		outp[,7]=outp[,2]+sqrt(tval)#outp[,3];
        if (ovals ^= 2) then;do;
		  cnmms=xname2[1,1]||"Coeff"||"se"||"t"||"p"||"LLCI"||"ULCI";
		end;
		if (ovals = 2) then;do;
          outp[,5]=2*(1-probnorm(abs(outp[,4])));
		  cnmms=xname2[1,1]||"Coeff"||"se"||"Z"||"p"||"LLCI"||"ULCI";
		end;
		rnmms=" ";
		print outp [label="Conditional Effect of Focal Predictor in Groups Defined by the Moderator Variable" 
		colname=cnmms rowname = rnmms format=&decimals];
      end;
      if (probeval[1,1] < mdmin) then;do;
	    lowwarn = 1;
	  end;
      if (probeval[nrow(probeval),1] > mdmax) then;do;
	    highwarn = 1;
	  end; 
      if (nval > 2) then;do;
	    if (mmodval = 999) then;do;
	      if (mcmod=0) then;do;
			if (quantile ^= 1) then;do;
	          print "Moderator values are the sample mean and plus/minus one SD from mean";
		    end;
			if (quantile = 1) then;do;
		      print "Values for quantitative moderators are 10th, 25th, 50th, 75th, and 90th percentiles";
			end;
	        if ((highwarn = 1) & (quantile=0)) then;do;
  		      print "Note: For the moderator values above, one SD above the mean was";
			  print "replaced with the maximum because one SD above the mean is outside";
			  print "of the range of the data";
		    end;
	        if ((lowwarn = 1) & (quantile=0)) then;do;
  		      print "Note: For the moderator values above, one SD below the mean was";
			  print "replaced with the minimum because one SD below the mean is outside";
			  print "of the range of the data";
		    end;
	      end;
        end;
      end;
      if (nval = 2) then;do;
	    if (mmodval = 999) then;do;
	      print "The moderator variable is dichotomous";
	    end;
	  end;
      if ((mmodval ^= 999) & (mcmod=0)) then;do;
        if (mmodval < mdmin) then;do;
	      print "Warning: MODVAL is outside of the range of the data";
	    end;
        if (mmodval > mdmax) then;do;
	      print "Warning: MODVAL is outside of the range of the data";
	    end;
      end;

      if (plot=1) then;do;
	    if ((mcfoc=0) & (mcmod=0)) then;do;
          cnms = (nms[(ncol(x)-2):(ncol(x)-1),1])`||yname;
		end;
        if (ovals = 2) then;do;
	      prob = exp(focvals[,3])/(1+exp(focvals[,3]));
		  focvals = focvals||prob;
		  cnms = cnms||"PROB";
		end;   
        print "*****************************************************************************";
        print "Data for Visualizing Conditional Effect of Focal Predictor";
	    print focvals [colname = cnms label = "" format = &decimals];
		if (ncovs > 0) then;do;
          print "NOTE: For data above, covariate are set to their sample means";
		end;
	  end;
   
    end;  
      if (itprob = 1) then;do;
        print "ERROR: There was a problem during iteration.";
      end;
      if (itprob = 2) then;do;
        errs=errs+1;
        runerrs[errs,1]=22;
      end;
    end; 
  end; 
end; *[cccc];

if (bad > 0) then;do;note[notes,1]=9;notes=notes+1;end;
print "****************************** ANALYSIS NOTES AND WARNINGS ******************************";
do i = 1 to errs;
  if (runerrs[i,1]=1) then;do;
    print "ERROR: One of your declared mediators is dichotomous. This procedure cannot be used.";
  end;
  if (runerrs[i,1]=2) then;do;
    print "ERROR: For model 6, this procedure limits the number of mediators to four.";
  end;
  if (runerrs[i,1]=3) then;do;
    print "ERROR: For models 1, 2, and 3, only a single variable can be listed in the M list.";
  end;
  if (runerrs[i,1]=4) then;do;
    print "ERROR: You requested a model involving W but did not provide a valid W variable name.";
  end;
  if (runerrs[i,1]=5) then;do;
    print "ERROR: You requested a model involving Z but did not provide a valid Z variable name.";
  end;
  if (runerrs[i,1]=6) then;do;
    print "ERROR: You requested a model involving Q but did not provide a valid Q variable name.";
  end;
  if (runerrs[i,1]=7) then;do;
    print "ERROR: You requested a model involving V but did not provide a valid V variable name.";
  end;
  if (runerrs[i,1]=8) then;do;
    print "ERROR: You specified a W variable for a model that does not need it.";
  end;
  if (runerrs[i,1]=9) then;do;
    print "ERROR: You specified a Z variable for a model that does not need it.";
  end;
  if (runerrs[i,1]=10) then;do;
    print "ERROR: You specified a Q variable for a model that does not need it.";
  end;
  if (runerrs[i,1]=11) then;do;
    print "ERROR: You specified a V variable for a model that does not need it.";
  end;
  if (runerrs[i,1]=12) then;do;
    print "ERROR: The variable specified for W has already been assigned.";
  end;
  if (runerrs[i,1]=13) then;do;
    print "ERROR: The variable specified for Z has already been assigned.";
  end;
  if (runerrs[i,1]=14) then;do;
    print "ERROR: The variable specified for Q has already been assigned.";
  end;
  if (runerrs[i,1]=15) then;do;
    print "ERROR: The variable specified for V has already been assigned.";
  end;
  if (runerrs[i,1]=16) then;do;
    print "ERROR: You did not provide a valid Y variable name.";
  end;
  if (runerrs[i,1]=17) then;do;
    print "ERROR: The variable specified for Y has already been assigned.";
  end;
  if (runerrs[i,1]=18) then;do;
    print "ERROR: Model 6 requires more than one mediator.";
  end;
  if (runerrs[i,1]=19) then;do;
    print "ERROR: You have not specified a valid model number.";
  end;
  if (runerrs[i,1]=20) then;do;
    print "ERROR: At least one and only one variable must be listed for X.";
  end;
  if (runerrs[i,1]=21) then;do;
    print "ERROR: At least one and only one variable must be listed for Y.";
  end;
  if (runerrs[i,1]=22) then;do;
    print "ERROR: Iteration didn't converge to a solution. Interpret results with caution.";
  end;
  if (runerrs[i,1]=23) then;do;
    print "ERROR: You specified a clustering variable that does not exist in your variable list.";
  end;
  if (runerrs[i,1]=24) then;do;
    print "ERROR: You specified a clustering variable that has already been assigned.";
  end;
  if (runerrs[i,1]=25) then;do;
    print "ERROR: One of more of your M variables is not listed in the variables list.";
  end;
  if (runerrs[i,1]=26) then;do;
    print "ERROR: A maximum of 20 cluster units is allowed. Use multilevel modeling instead.";
  end;
  if (runerrs[i,1]=27) then;do;
    print "ERROR: One of the variables in your model is a constant.";
  end;
  if (runerrs[i,1]=28) then;do;
    print "ERROR: Dichotomous Y is not permitted with WS option.";
  end;
  if (runerrs[i,1]=29) then;do;
    print "ERROR: Insufficient number of variables in vars= list when using WS option.";
  end;
  if (runerrs[i,1]=30) then;do;
    print "ERROR: Too many number of variables in vars= list when using WS option.  Covariates not allowed.";
  end;
  if (runerrs[i,1]=31) then;do;
    print "ERROR: mmodval and wmodval cannot both be set to zero with contrast option.";
  end;
  if (runerrs[i,1]=32) then;do;
    print "ERROR: You did not provide a valid X variable name.";
  end;
  if (runerrs[i,1]=34) then;do;
    print "ERROR: X and M cannot both be specified as multicategorical.";
  end;
  if (runerrs[i,1]=35) then;do;
    print "ERROR: Multicategorical variable specification available only for models 1 and 4.";
  end;
  if (runerrs[i,1]=36) then;do;
    print "ERROR: Categorical variables cannot have more than 9 categories";
  end;
  if (runerrs[i,1]=37) then;do;
    print "ERROR: Each group must have at least two cases.";
  end;
  if (runerrs[i,1]=38) then;do;
    print "ERROR: Cluster option not available with multicategorical variables.";
  end;
  if (runerrs[i,1]=39) then;do;
    print "ERROR: A maximum of 10 variables is allowed in the M= list.";
  end;
  if (runerrs[i,1]=41) then;do;
    print "ERROR: MCM option not available with model 4.";
  end;
end;
if (errs = 0) then;do;
  if ((boot > 1) | (mc > 0)) then;do;
    if ((bconoff = 1) & (boot > 0)) then;do;
      print boot [label = "Number of bootstrap samples for bias corrected bootstrap confidence intervals:" format = 10.0];
    end;
    if ((bconoff = 0) & (boot > 0)) then;do;
      print boot [label = "Number of bootstrap samples for percentile bootstrap confidence intervals:" format = 10.0];
    end;
    if (mc > 1) then;do;
      print mc [label = "Number of samples for Monte Carlo confidence intervals:" format = 10.0];
    end;
    if (booterr = 1) then;do;
      badend=badend[1,2:(ncol(badend))];
	  badend=badend`;
      print badend [label = "WARNING: Bootstrap CI endpoints below not trustworthy. Decrease confidence or increase bootstraps" format = &decimals];
    end;
  end;
  print conf [label = "Level of confidence for all confidence intervals in output:" format = 10.4];
  if (((center = 1) | (ws=1)) & (ncol(centvar) > 0)) then;do;
    centvar=centvar[1,2:ncol(centvar)];
	print centvar [label = "NOTE: The following variables were mean centered prior to analysis:"]; 
  end;
  warnrep=0;
  do i = 1 to notes;
    if (note[i,1]=1) then;do;
      print "NOTE: Confidence level restricted to between 50 and 99.9999%.  95% confidence is provided.";
    end;
    if (note[i,1]=2) then;do;
      print "NOTE: Effect size measures not available for models with dichotomous outcomes.";
    end;
    if (note[i,1]=3) then;do;
      print "NOTE: All standard errors for continuous outcome models are based on the HC3 estimator.";
    end;
    if (note[i,1]=6) then;do;
      print "NOTE: The number of bootstrap samples was adjusted upward given your desired confidence.";
    end;
    if (note[i,1]=7) then;do;
      print "NOTE: The Johnson-Neyman method is available only for models 1 and 3.";
    end;
    if (note[i,1]=8) then;do;
      print "NOTE: The Johnson-Neyman method cannot be used with a dichotomous moderator.";
    end;
    if (note[i,1]=9) then;do;
      print bad [label = "NOTE: Some bootstrap samples had to be replaced. The number of such replacements was:" format = 10.0];
    end;
    if (note[i,1]=11) then;do;
      print nmiss [label = "NOTE: Some cases were deleted due to missing data. The number of such cases was:" format = 10.0];
    end;
	if (note[i,1]=12) then;do;
      print "NOTE: Monte Carlo method available only for models 4 and 5.  Bootstrapping was used instead.";
    end;
    if (note[i,1]=13) then;do;
      print "NOTE: The number of Monte Carlo samples was adjusted upward given your desired confidence.";
    end;
	if (note[i,1]=19) then;do;
      print "NOTE: Effect sizes not available for within-subject analyses.";
    end;
    if (note[i,1]=16) then;do;
      print "NOTE: Normal theory tests not available for within-subject analyses."; 
    end;
    if (note[i,1]=17) then;do;
      print "NOTE: Monte Carlo confidence intervals not available for within-subject analyses."; 
    end;
	if (note[i,1]=18 & warnrep=0) then;do;
      print "WARNING: You have requested OLS estimation with a dichotomous criterion.";
      print "Interpret model coefficients and inferential statistics with caution."; 
      warnrep=1;
    end;
    if (note[i,1]=20) then;do;
      print "NOTE: Saving of bootstrap estimates not available for within-subject analyses.";
    end;
	if (note[i,1]=22) then;do;
      print "NOTE: Effect size option with covariates requires covariates in models of M and Y.";
    end;
	if (note[i,1]=23) then;do;
	  print "NOTE: Johnson-Neyman method not available with multicategorical moderator.";
    end;
	if (note[i,1]=24) then;do;
	  print "NOTE: MMODVAL option not available for use with a multicategorical moderator.";
    end;
	if (note[i,1]=25) then;do;
	  print "NOTE: Omnibus test for relative indirect effects is not available with the MC option.";
    end;
	if (note[i,1]=26) then;do;
	  print "NOTE: CONTRAST option not available for use with a multicategorical moderator.";
    end;
	if (note[i,1]=27) then;do;
	  print "NOTE: EFFSIZE option not available for use with a multicategorical moderator.";
    end;
	if (note[i,1]=28) then;do;
	  print "NOTE: NORMAL option not available for use with a multicategorical moderator.";
    end;
    if (note[i,1]=29) then;do;
	  print "NOTE: Contrast weights accepted only for models 4 and 5.";
    end;
	if (note[i,1]=30) then;do;
	  print "NOTE: The number of contrast weights must equal the number of mediators.";
    end;
	if (note[i,1] = 31) then;do;
      print "NOTE: The TOTAL option is not available when Y is dichotomous.";
    end;
	if (note[i,1] = 32) then;do;
      print "NOTE: Kappa-squared is disabled from output as of version 2.16.";
    end;
  end;
end;
quit;
options pagesize=54;
%mend;

